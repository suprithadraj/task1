/***********************************************************************
*	Name			: TestCaseAssignmentEngine_AC
*	Author		  : Appirio Offshore (Kalpesh Vyas)
*	Created Date	: Nov 27, 2012
*	Descripton	  : Test class for trigger CaseAssignmentEngine_AC
*********************************************************************/
@isTest
private class TestCaseAssignmentEngine_AC {

	private static Case testCase;
	private static Advanced_Support_Groups__c advSuppGrp;
	private static Product_Class__c prodDIP;
	private static Product_Class__c prodEOT;
	private static Product_Class__c prodHAP;
	private static Product_Class__c prodHCI;
	private static Product_Class__c prodHCA;
	private static Product_Class__c prodHTM;
	private static Product_Class__c prodSIT;
	private static Product_Class__c prodILS;
	private static Product_Class__c prodTEMP, prodVIP;
	private static final List<String> validRecordTypes = new List<String>
	  {'Account','Parent_Account', 'Partner_Account', 'Partner_Parent_Account'};
	private static final Set<String> validProductFeatures =
			new Set<String>{'DDR Controller',  'ILS-EDU'};
	private static final List<String> validProductClasses =
  new List<String>{'Design IP', 'Verification IP', 'Memory Model', 'Internet Learning Series',
  'Cadence Online Support','DFII','EdaOnTap','Hosted: Applications/Packages',
	'Hosted: Chamber Infrastructure','Hosted: Connectivity/Access','Hosted: Technology/Methodology',
	'Installation','Languages','Skill','Shared Tools'};



	@isTest(SeeAllData = true)
	static void testCaseAssignment() {
		QueuedTaskAssignmentTable__c newAssignQueueTable = QueuedTaskAssignmentTable__c.getInstance('SSG_North_America');
		if(newAssignQueueTable == null){
			Id  idOfQueue = [Select Id from Group where Type = 'Queue' and Name = 'SSG_North_America'].Id;
			QueuedTaskAssignmentTable__c  qct = new QueuedTaskAssignmentTable__c(Name = 'SSG_North_America' , Queue_Id__c = idOfQueue);
			insert qct;
		}

		createTestData();
		CaseAssignmentEngine_AC.caseReassign(testCase.Id);
		 Test.startTest();
		 User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];
		 System.runAs (thisUser) {
		List<Case> cases = new List<Case>{testCase};
	 //   try{
		CaseAssignmentEngine_AC.assignBatchCases(cases, true);
		CaseAssignmentEngine_AC.assignBatchCases(cases, false);
		cases[0].Subject = 'Service Request Submission';
		cases[0].Priority = 'Critical';
		update cases;

		CaseAssignmentEngine_AC.createSSGQueuedTask(cases);
		Set<String> bypassLicenseStatus = CaseAssignmentEngine_AC.ByPassLicenceProductStatus;
		 Test.stopTest();
	   // }catch(exception e){

		//}

	 }

	}


/*	@isTest(SeeAllData = true)
	static  void testCaseAssignmentDesignIPWithOverrideReason() {

		 TSMC_Helper__c t = [SELECT Id,Name,Value__c FROM TSMC_Helper__c where name ='TSMC_EMT_LOGIN_IDS' limit 1];
		 If(t == null){
					t = new TSMC_helper__c(name='TSMC_EMT_LOGIN_IDS',Value__c='beckley;ccteng;smandava;zaman');
					insert t;
		  }

		 Map<String,String> recTypeMap = getRecTypeMap();
		 User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];
		  User u = TestUtils.createUser(false);
			u.username = 'testuser12346@cadence.com';
			u.Available_For_Support__c = true;
			u.Employment_Status__c = 'Available';
			u.IsActive = true;
			insert u;

		QueuedTaskAssignmentTable__c newAssignQueueTable = QueuedTaskAssignmentTable__c.getInstance('SSG_North_America');
		if(newAssignQueueTable == null){
			Id  idOfQueue = [Select Id from Group where Type = 'Queue' and Name = 'SSG_North_America'].Id;
			QueuedTaskAssignmentTable__c  qct = new QueuedTaskAssignmentTable__c(Name = 'SSG_North_America' , Queue_Id__c = idOfQueue);
			insert qct;
		 }

		Account parentAccount = TestUtils.createAccountWithRecordType(recTypeMap.get('Parent_Account'),true);
		parentAccount.Type = 'Non-Alliance Competitor';
		update parentAccount;
		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Non-Alliance Competitor';
			User u1 = TestContext.queryCadenceMigrationUser();
			if(u1 != null){
				System.runAs(u1){
					insert acc;
				}
			}else{
				insert acc;
			}
		Country__c country = TestUtils.createCountry('INDIA', true);
		System.assertNotEquals(null, acc);
		system.debug('====Account===='+acc);

		Id  nc_ownerid = [Select Id from Group where Type = 'Queue' and Name = 'NO_CASE_OWNER'].Id;

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Support_Level__c = 'Premium';
		con.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		con.Email = 'test123@cadence.com';
		con.street__c = 'test';
		con.City__c = 'test';
		con.FirstName='test';
		con.LastName='test cndnce';
		con.Accountid=acc.Id;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		insert con;
	 System.runAs (thisUser) {

			Test.startTest();

			prodDIP = TestUtils2.createProductClass(false);
			prodDIP.Name = 'Design IP';
			insert prodDIP;

			Support_Address__c CusSet = new Support_Address__c();
			CusSet.Name = 'Support TST1';
			CusSet.EmailAddress__c = 'test002@cadence.com';
			CusSet.Sender_Display__c = 'Cadence Support';
			insert CusSet;

			CaseTriggerHandler_AC.isByPassCheck=true;
			Case testCase2 = new Case();
			Product_Feature__c pFeature = new Product_Feature__c();
			pFeature.Name = 'DPHY';
			pFeature.Active_Flag__c = true;
			insert pFeature;
			testCase2.Product__c = prodDIP.Id;
			testCase2.product_Feature__c = pFeature.Id;
			testCase2.ContactId = con.id;
			testCase2.Product_Class_Name__c = prodDIP.Name;
			testCase2.Subject='test';
			testCase2.Origin='Manual';
			testCase2.Priority ='High';
			testCase2.Description = 'test';
			testCase2.Description__c = 'test';
			testCase2.Override_Reason__c ='Test';


			//try{
			insert testCase2;
			System.debug('========LIMIT VALUE=======' + Limits.getLimitQueries());

			CaseAssignmentEngine_AC.caseReassign(testCase2.Id);
			List<Case> c = [SELECT OwnerId, owner.name From Case where Id = :testCase2.Id];
			system.assertNotEquals(nc_ownerid , c[0].ownerId);
		   // }catch(exception ex){system.debug('====error===='+ex);}
			CaseTriggerHandler_AC.isByPassCheck=false;
			Test.stopTest();
	 }
	}
*/

	@isTest(SeeAllData = true)
	static void testCaseAssignment2() {

		QueuedTaskAssignmentTable__c newAssignQueueTable = QueuedTaskAssignmentTable__c.getInstance('SSG_North_America');
		if(newAssignQueueTable == null){
			Id  idOfQueue = [Select Id from Group where Type = 'Queue' and Name = 'SSG_North_America'].Id;
			QueuedTaskAssignmentTable__c  qct = new QueuedTaskAssignmentTable__c(Name = 'SSG_North_America' , Queue_Id__c = idOfQueue);
			insert qct;
		}
		createTestData();
			Test.startTest();
		User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId() ];
		User thisUser1 = [SELECT Id FROM User WHERE Name = 'Cadence Migration' ];

		System.runAs (thisUser) {

			AccountTriggerHandler_AC.isByPassTrigger=true;
			Map<String,String> recTypeMap = getRecTypeMap();
			Account parentAccount = TestUtils.createAccountWithRecordType(
											recTypeMap.get('Parent_Account'),true);


			Account acc = TestUtils.createAccount(false);
			acc.Status__c = 'Active';
			acc.ParentId = parentAccount.id;
			User u1 = TestContext.queryCadenceMigrationUser();

			System.runAs(thisUser1){
				insert acc;
			}
			AccountTriggerHandler_AC.isByPassTrigger=false;

			Country__c country = TestUtils.createCountry('INDIA', true);
			ContactTriggerHandler_AC.bypassUnifiedUser=true;
			Contact con = TestUtils.createContact(acc.Id, false);
			con.Advanced_Support_Group__c =  advSuppGrp.Id;
			con.Advanced_Support_Flag__c = true;
			con.Parent_Account__c = parentAccount.id;
			con.country__c = country.id;
			con.Email = 'test003@cadence.com';
			System.runAs(thisUser1){
				insert con;
			}
			ContactTriggerHandler_AC.bypassUnifiedUser=false;
			testCase.ContactId = con.Id;
			testCase.Product__c = prodTEMP.Id;
			testCase.Trigger_Bypass__c = true;
			testCase.Assignment_Status__c = 'Check Assignment';
			testCase.Origin = 'Cust Solution';
			CaseTriggerHandler_AC.isByPassCheck=true;
			System.runAs(thisUser1){
				update testCase;
			}
			System.debug('------------'+testCase.Assignment_Status__c);
			System.debug('--act--'+[select Active__c from Advanced_Support_Groups__c where Id= :con.Advanced_Support_Group__c].Active__c);
		   // System.debug('------------'+testCase.Advanced_Support_Flag__c);
		   //	CaseAssignmentEngine_AC.caseReassign(testCase.Id);

			List<Case> cases = new List<Case>{testCase};

			CaseAssignmentEngine_AC.assignBatchCases(cases, true);

			//CaseAssignmentEngine_AC.assignBatchCases(cases, false);

			cases[0].Subject = 'Service Request Submission';
			cases[0].Priority = 'Critical';
			System.runAs(thisUser1){
				update cases;
			}


		   // try{
			CaseAssignmentEngine_AC.createSSGQueuedTask(cases);
		   // }catch(exception e){

		   // }
			CaseTriggerHandler_AC.isByPassCheck=false;
			Test.stopTest();
		}
	}
	@isTest(SeeAllData = true)
	static void testAdvSupportGrpAllPrd() {
		User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];
		System.runAs (thisUser) {
		Product_Class__c prodCls = TestUtils2.createProductClass(true);
		Product_Feature__c prodFeat = TestUtils2.createProductFeature(true);
		Prod_Cls_to_Feat_Jct__c prodClsProdFeat = new Prod_Cls_to_Feat_Jct__c(
								Product_Feature__c = prodFeat.id, Product_Class__c = prodCls.id);
		insert prodClsProdFeat;

		Group grp = createGroup('grpTest');
		insert grp;

		QueueSObject qs =createQueueSObject(grp.id);

		User u = TestUtils.createUser(false);
		u.username = 'testuser12346@cadence.com';
		u.Available_For_Support__c = true;
		u.Employment_Status__c = 'Available';
		u.IsActive = true;
		insert u;


		CollaborationGroup chatterGrp = new CollaborationGroup(Description='ChatterGrp', CollaborationType='Public', Name='ChatterGrp');
		insert chatterGrp;

		advSuppGrp = new Advanced_Support_Groups__c(Active__c=true, CSC__c=u.Id, All_Products__c=true,
						Chatter_Group__c=chatterGrp.Name, CurrencyIsoCode='USD', Queue__c=grp.Name);
		insert advSuppGrp;

		ASG_to_Prod_Feat_Junc__c  asgProdFeatJunc = new ASG_to_Prod_Feat_Junc__c();
		asgProdFeatJunc.Advanced_Support_Group__c = advSuppGrp.Id;
		asgProdFeatJunc.Product_Feature__c = prodFeat.Id;
		insert asgProdFeatJunc;

		Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
			User u1 = TestContext.queryCadenceMigrationUser();
			if(u1 != null){
				System.runAs(u1){
					insert acc;
				}
			}else{
				insert acc;
			}

			 Test.startTest();

		Country__c country = TestUtils.createCountry('INDIA', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Advanced_Support_Group__c =  advSuppGrp.Id;
		con.Advanced_Support_Flag__c = true;
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Support_Level__c = 'Advanced Support';
		con.Email = 'test004@cadence.com';
		insert con;


		Case newCase = new Case(Status = 'New', Subject = 'Subject',
		Description = 'desc',
		Origin = 'Manual',  Product_Feature2__c = prodClsProdFeat.id,
		Product__c =  prodCls.id, ContactId= con.Id,
		product_Feature__c = prodFeat.id, Override_Reason__c='HDS Support',
		Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
		Trigger_Bypass__c = true,
		Assignment_Made__c = false);

		newCase.Subject='test';
		newCase.Origin='Manual';
		newCase.Priority ='High';
		newCase.Description = 'test';
		newCase.Description__c = 'test';

	   system.debug('========newCase========'+newCase);
		insert newCase;

		CaseAssignmentEngine_AC.caseReassign(newCase.Id);

		Test.stopTest();
		}
 }



	@isTest(SeeAllData = true)
	static void testCaseAssignmentVIP() {
		createTestData();
		test.starttest();
		User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];
		  recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
 		System.runAs (thisUser) {

	   Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;
		testCase.Product__c = prodVIP.Id;
		testCase.product_Feature__c = pFeature.Id;
		testCase.recordtypeid=r.id;
		update testCase;
		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{testCase}, null, true) ;
		 test.stoptest();
 }
	}
    
    
/*	@isTest(SeeAllData = true)
	 static  void testCaseAssignmentDesignIPWithoutContact() {

		 User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];
		  User u = TestUtils.createUser(false);
			u.username = 'testuser12346@cadence.com';
			u.Available_For_Support__c = true;
			u.Employment_Status__c = 'Available';
			u.IsActive = true;
			insert u;
	 System.runAs (thisUser) {

		   // Group grp = createGroup('IPG_SUPPORT');
			//insert grp;
			CaseTriggerHandler_AC.isByPassCheck=true;
			Case testCase2 = createCaseWithProductFields(u);
			Product_Feature__c pFeature = new Product_Feature__c();
			pFeature.Name = 'DPHY';
			pFeature.Active_Flag__c = true;
			insert pFeature;
			testCase2.Product__c = prodDIP.Id;
			testCase2.product_Feature__c = pFeature.Id;
			testCase2.ContactId = null;
			testCase2.Product_Class_Name__c = prodDIP.Name;
			testCase2.Subject='test';
			testCase2.Origin='Manual';
			testCase2.Priority ='High';
			testCase2.Description = 'test';
			testCase2.Reassign_Click_count__c = null;
			Test.startTest();
		  //  try{
			insert testCase2;
			System.debug('========LIMIT VALUE=======' + Limits.getLimitQueries());

			CaseAssignmentEngine_AC.caseReassign(testCase2.Id);
		  //  }catch(exception ex){system.debug('====error===='+ex);}
			CaseTriggerHandler_AC.isByPassCheck=false;
			Test.stopTest();
	 }
	}
*/

	private static Case createDummyCase(){
		return new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						Support_Center__c = 'North America',
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false);
	}

   // To test Product support queues
	@isTest(SeeAllData=false)
	static void testQueueAssignment(){
		List<Case> cases = new List<Case>();
				  recordtype r=[select id from recordtype where sobjecttype='case' limit 1];

		for(Integer i=0;i< 4;i++){
			cases.add(new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,recordtypeid=r.id,
						Assignment_Made__c = false));
		}

		Integer cnt = 0;
		for(QueueAssignment__c qAsg : [SELECT Product__c, Product_Feature__c, Name, Id
										FROM QueueAssignment__c Where RecordType.Name='Case' AND (No_User_Found__c IN ('EDA_SUPPORT')
										OR Check_User_Availability__c = true
										OR Product_Feature__c != null)
										Limit 4]){
			cases[cnt].Product__c =  qAsg.Product__c;
			cases[cnt].product_Feature__c = qAsg.Product_Feature__c;
			cnt++;
		}
		insert cases;

		CaseAssignmentEngine_AC.assignMultipleCases(cases, null, true);
	 }


	 // To test Japan support center related Case assignment
	 @isTest(SeeAllData=false)
	   static void testJapanAssignment() {

		Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('INDIA', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_JAPAN;
		con.Email = 'test005@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_JAPAN,recordtypeid=r.id);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}
		system.debug('=======rectype id======'+newCase.RecordTypeId);
		system.debug('=======map======'+CaseTriggerHandler_AC.recTypeMap);
		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true);
	}

	 static testMethod void testCVA_Support(){
	 Account_Type_Rule__c at=new Account_Type_Rule__c();
	 at.name='Tieraccountrule';
	 at.Account_Type__c='Top,Focus,Tier1,Tier2';
	 insert at;

		Test.startTest();

		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('INDIA', true);

		List<Contact> contacts = new List<Contact>();
		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_JAPAN;
		con.Email = 'test006@cadence.com';
		contacts.add(con);
		Contact con2 = TestUtils.createContact(acc.Id, false);
		con2.Parent_Account__c = parentAccount.id;
		con2.country__c = country.id;
		con2.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_KOREA;
		con2.Email = 'test2@cadence.com';
		contacts.add(con2);
		insert contacts;

		Product_Class__c cvaProduct = TestUtils2.createProductClass(false);
		for(String prodName : CaseTriggerHandler_AC.ProdToCVASupport){
		   cvaProduct.Name = prodName;

			System.debug('prodName ' +prodName);
			break;
		}
		insert cvaProduct;

		System.debug('cvaProduct '+cvaProduct);
		CaseTriggerHandler_AC.isByPassCheck = true;
		List<Case> cases = new List<Case>();
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  cvaProduct.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_INDIA,
						Product_Class_Name__c = cvaProduct.Name
						);
		 cases.add(newCase);
		 Case newCase2 = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con2.Id,
						Product__c =  cvaProduct.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_INDIA,
						Product_Class_Name__c = cvaProduct.Name
						);
		 cases.add(newCase2);
		User migrationUser, cvaUser = null;
		for(User u : [Select Id, Name From User where Name = 'Cadence Migration' OR LastName = 'CVA_SUPPORT' Limit 2]){
			if(u.Name == 'Cadence Migration'){
				migrationUser = u;
			}
			else{
				cvaUser = u;
			}
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert cases;
		}
		}else{
				insert cases;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(cases, null, true);
		 Set<String> bypassLicenseStatus = CaseAssignmentEngine_AC.ByPassLicenceProductStatus;
		Test.stopTest();
	}

	 @isTest(SeeAllData=false)
	private static void testBUSummayProduct(){
		Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Support_Level__c = 'Standard';
		acc.Status__c = 'Active';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('INDIA', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_INDIA;
		con.Email = 'test007@cadence.com';
		insert con;

	   Product_Attribute__c prodAttr = TestUtils2.createProductAttribute('Digital IC', true);

	   Product_Class__c prodCls = TestUtils2.createProductClass(false);
	   prodCls.Product_Attribute__c = prodAttr.Id;
	   insert prodCls;
	   Product_Feature__c prodFeat = TestUtils2.createProductFeature(true);


	   Test.startTest();

		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodCls.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_INDIA
						);

		User migrationUser, cvaUser = null;
		for(User u : [Select Id, Name From User where Name = 'Cadence Migration' Limit 1]){
				migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
				CaseAssignmentEngine_AC.caseReassign(newCase.Id);
		}
		}else{
				insert newCase;
				CaseAssignmentEngine_AC.caseReassign(newCase.Id);
		}


		Test.stopTest();

	}
	@isTest(SeeAllData = true)
	static void testAdv_Support(){
		User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];
		System.runAs (thisUser) {
		Product_Class__c prodCls = TestUtils2.createProductClass(true);
		Product_Feature__c prodFeat = TestUtils2.createProductFeature(true);
		Prod_Cls_to_Feat_Jct__c prodClsProdFeat = new Prod_Cls_to_Feat_Jct__c(
								Product_Feature__c = prodFeat.id, Product_Class__c = prodCls.id);
		insert prodClsProdFeat;

		Group grp = createGroup('grpTest');
		insert grp;
		QueueSObject qs =createQueueSObject(grp.id);


		User u = TestUtils.createUser(false);
		u.username = 'testuser12346@cadence.com';
		u.Available_For_Support__c = true;
		u.Employment_Status__c = 'Available';
		u.IsActive = true;
		insert u;


		CollaborationGroup chatterGrp = new CollaborationGroup(Description='ChatterGrp', CollaborationType='Public', Name='ChatterGrp');
		insert chatterGrp;

		advSuppGrp = new Advanced_Support_Groups__c(Active__c=true, CSC__c=u.Id, All_Products__c=false,
						Chatter_Group__c=chatterGrp.Name, CurrencyIsoCode='USD', Queue__c=grp.Name);
		insert advSuppGrp;

		ASG_to_Prod_Feat_Junc__c  asgProdFeatJunc = new ASG_to_Prod_Feat_Junc__c();
		asgProdFeatJunc.Advanced_Support_Group__c = advSuppGrp.Id;
		asgProdFeatJunc.Product_Feature__c = prodFeat.Id;
		insert asgProdFeatJunc;

		AccountTriggerHandler_AC.isByPassTrigger = true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
			User u1 = TestContext.queryCadenceMigrationUser();
			if(u1 != null){
				System.runAs(u1){
					insert acc;
				}
			}else{
				insert acc;
			}
		Country__c country = TestUtils.createCountry('INDIA', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Advanced_Support_Group__c =  advSuppGrp.Id;
		con.Advanced_Support_Flag__c = true;
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Support_Level__c = 'Advanced Support';
		con.Email = 'test001@cadence.com';
		con.LastName = 'test001';
		insert con;

		//AccountTriggerHandler_AC.isByPassTrigger = false ;
		//ContactTriggerHandler_AC.bypassUnifiedUser = false;
		Test.startTest();

		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
		Description = 'desc',
		Origin = 'Manual',  Product_Feature2__c = prodClsProdFeat.id,
		Product__c =  prodCls.id, ContactId= con.Id,
		product_Feature__c = prodFeat.id, Override_Reason__c='HDS Support',
		Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
		Trigger_Bypass__c = true,
		Assignment_Made__c = false);
		newCase.Subject='test';
		newCase.Origin='Manual';
		newCase.Priority ='High';
		newCase.Description = 'test';
		newCase.Description__c = 'test';
		insert newCase;

		CaseAssignmentEngine_AC.caseReassign(newCase.Id);

		Test.stopTest();
		}
	}

	// TO cover the LUTSupportLevelAssign method
	@isTest
	static void testAssignmentMethodLUT(){
		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'Design IP';
		insert prodTEMP;

		id defaultRecordType=null;
		id DIPRecordType=null;
		for(recordtype r:[select id,developername from recordtype where sobjecttype='case']){
			if(r.developername=='Default')defaultRecordType=r.id;
			if(r.developername=='DIP')DIPRecordType=r.id;
		}

		 User migrationUser = null;
		for(User u : [Select Id, Name From User where Name = 'Cadence Migration' Limit 1]){
				migrationUser = u;
		}

		Case caseRec = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId =null,
						Product__c =  prodTEMP.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Product_Class_Name__c = 'Design IP',
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_INDIA,
						recordtypeid=DIPRecordType,
						ownerid=UserInfo.getUserId());

		List<Case> caseWebServiceList = new List<Case>();
		caseWebServiceList.add(caseRec);
		//To cover the Design IP if condition which was not covered in earlier test methods
		System.assertEquals('Design IP', caseRec.Product_Class_Name__c);
		System.assertEquals(DIPRecordType, caseRec.recordtypeid);
		CaseAssignmentEngine_AC.populateCaseRelatedFields(caseRec,caseWebServiceList);

		Case caseRec0 = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId =null,
						Product__c =  prodTEMP.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Product_Class_Name__c = 'Design IP',
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_INDIA,
						recordtypeid=defaultRecordType);
		//To cover the createSSGQueuedTask if condition which was not covered in earlier test methods
		QueuedTaskTriggerHandler_AC.Bypasstriggerforcos = true;
		caseRec0.Subject='Attn: SSG/CRC - COS account created';
		List<Case> cases = new List<Case>{caseRec0};
		CaseAssignmentEngine_AC.createSSGQueuedTask(cases);
		caseRec0.Origin='COS';
		cases.add(caseRec0);
		System.assertEquals('COS', cases[0].Origin);

		Queued_Task__c queuedTaskRec = new Queued_Task__c();

		queuedTaskRec.Case__c = cases[0].Id;
		queuedTaskRec.Contact__c = cases[0].ContactId;
		queuedTaskRec.Name = 'Case #' + cases[0].CaseNumber;
		queuedTaskRec.Product_Class__c = cases[0].Product__c;
		queuedTaskRec.Activity_Type__c='';
		queuedTaskRec.OwnerId=migrationUser.Id;
		insert queuedTaskRec;

		CaseAssignmentEngine_AC.createSSGQueuedTask(cases);
		QueuedTaskTriggerHandler_AC.Bypasstriggerforcos = false;

		Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType(recTypeMap.get('Parent_Account'),true);
		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
			User u1 = TestContext.queryCadenceMigrationUser();
			if(u1 != null){
				System.runAs(u1){
					insert acc;
				}
			}else{
				insert acc;
			}
		Country__c country = TestUtils.createCountry('INDIA', true);
		System.assertNotEquals(null, acc);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Support_Level__c = 'Advanced Support';
		con.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		con.Email = 'test123@cadence.com';
		con.street__c = 'test';
		con.City__c = 'test';
		con.FirstName='test';
		con.LastName='test cndnce';
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		insert con;
		ContactTriggerHandler_AC.bypassUnifiedUser = false;
		System.assertNotEquals(null, con);

		list<Support_Address__c> CusSetlist = new list<Support_Address__c>();
		Support_Address__c CusSet = new Support_Address__c();
		CusSet.Name = 'Support TST';
		CusSet.EmailAddress__c = 'test03@cadence.com';
		CusSet.Sender_Display__c = 'Cadence Support';
		CusSetlist.add(CusSet);
		Support_Address__c CusSet1 = new Support_Address__c();
		CusSet1.Name = 'DO_NOT_REPLY';
		CusSet1.EmailAddress__c = 'noreplytst@cadence.com';
		CusSet1.Sender_Display__c = 'noreply@cadence.com';
		CusSetlist.add(CusSet1);
		Support_Address__c CusSet2 = new Support_Address__c();
		CusSet2.Name = 'VIP Support';
		CusSet2.EmailAddress__c = 'test@cadence.com';
		CusSet2.Sender_Display__c = 'test@cadence.com';
		CusSetlist.add(CusSet2);
		insert CusSetlist;
		System.assertNotEquals(null, CusSetlist);
		List<CaseAssignmentRelatedValues__c> caseRelVals = new List<CaseAssignmentRelatedValues__c>{new CaseAssignmentRelatedValues__c(ValueList__c = 'Silicon Package Board', Name = 'BUSummaryBypassDelay'),new CaseAssignmentRelatedValues__c(ValueList__c = 'Eval', Name = 'ProdStatusByPassDelay'),new CaseAssignmentRelatedValues__c(ValueList__c ='Palladium,Palladium XP', Name = 'ProdToCVASupport')};
		insert caseRelVals;
		System.assertNotEquals(null, caseRelVals);
		List<Case_Assignment_Interval__c> csIntervals = new List<Case_Assignment_Interval__c>{
			new Case_Assignment_Interval__c(Hours__c=18, Minutes__c=0, Name='CS DELAY'),
			new Case_Assignment_Interval__c(Hours__c=1, Minutes__c=0, Name='CS TEMP DELAY')
		};
		insert csIntervals;
		System.assertNotEquals(null, csIntervals);


		Support_Center_Configuration__c scc = new Support_Center_Configuration__c();
		scc.Delay_Active__c=true;
		scc.Active__c=true;
		insert scc;
		System.assertNotEquals(null, scc);

		caseRec.Origin ='Manual';
		caseRec.Status ='New';
		caseRec.Priority ='Critical';
		caseRec.ContactId=con.id;
		caseRec.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		//insert caseRec;

		//To cover the checkForDelay and doNormalAssignment if condition which was not covered in earlier test methods
		List<Case> cases1 = new List<Case>{caseRec};
		Map<String, Set<String>> ASGProdFeatMap = new Map<String, Set<String>>();
		caseRec.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		//caseRec.Support_Level__c = 'Advanced Support';
		List<Case> cases2 = new List<Case>{caseRec};
		Test.startTest();
		CaseAssignmentEngine_AC.assignMultipleCases(cases2, ASGProdFeatMap , false);

		caseRec.Origin='Cust Solution';
		caseRec.Support_Level__c='Standard';
		List<Case> cases21 = new List<Case>{caseRec};
		CaseAssignmentEngine_AC.assignMultipleCases(cases21, ASGProdFeatMap , false);

		caseRec.Origin='Manual';
		caseRec.Support_Level__c='Standard';
		List<Case> cases22 = new List<Case>{caseRec};
		CaseAssignmentEngine_AC.assignMultipleCases(cases22, ASGProdFeatMap , false);

		caseRec.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_FRANCE;
		caseRec.Support_Level__c = 'Internal';
		List<Case> cases3 = new List<Case>{caseRec};
		CaseAssignmentEngine_AC.assignMultipleCases(cases3, ASGProdFeatMap , false);

		//To set the contact support center without LUT record.

		 Case caseRec1 = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId =con.id,
						Product__c =  prodTEMP.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Product_Class_Name__c = 'Test',
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA,
						recordtypeid=defaultRecordType,
						ownerid=UserInfo.getUserId());

		insert caseRec1;
		case createdCase = [select id,Support_Level__c,Support_Center__c from case where id=:caseRec1.id limit 1];
		contact createdCont= [select id,Support_Level__c,Support_Center__c from contact where id=:con.id limit 1];
		System.assertEquals(createdCont.Support_Level__c, createdCase.Support_Level__c);

		//To set the Lokup table support center.
		Map<String,Lookup_Table__c> resLUTMap = new Map<String,Lookup_Table__c>();
		Cadence_Platform__c pp = new Cadence_Platform__c();
		pp.Active__c=true;
		pp.Cos_Visibility__c=true;
		pp.Name__c='Test';
		pp.Status__c='ACTIVE';
		insert pp;

		Product_Attribute__c pa= new Product_Attribute__c();
		pa.Name='Virtuoso Advanced Node';
		pa.Cadence_Platform__c=pp.id;
		pa.Status__c='ACTIVE';
		insert pa;

		Product_Class__c prodClass= [select id,Product_Attribute__c,Product_Attribute__r.Cadence_Platform__c from Product_Class__c where id=:prodTEMP.Id];
		System.assertNotEquals(null, prodClass);
		prodClass.Product_Attribute__c=pa.id;
		update prodClass;

		Lookup_Table__c lut1= new Lookup_Table__c();
		lut1.Support_Level__c ='Premium';
		lut1.Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		lut1.Parent_Account__c=parentAccount.id;
		lut1.Product_Platform__c=pp.id;
		lut1.Status__c='Active';
		insert lut1;
		System.assertNotEquals(null, lut1.id);
		resLUTMap.put(lut1.Support_Center__c+lut1.Parent_Account__c+lut1.Product_Platform__c,lut1);

		List <Case> caseListData = new List <Case>();
		Case caseRec2 = new Case(Status = 'New', Subject = 'Subject Test',
						Description = 'Description test',
						Origin = 'Manual',
						ContactId =con.id,
						Product__c =  prodTEMP.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Product_Class_Name__c = 'Test',
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA,
						recordtypeid=defaultRecordType,
						ownerid=UserInfo.getUserId(),
						Support_Level__c = con.Support_Level__c);
		caseListData.add(caseRec2);

		Map < Id, Product_Class__c > prodPltformMap = new Map < Id, Product_Class__c >([select id,Product_Attribute__c,Product_Attribute__r.Cadence_Platform__c from Product_Class__c where id=:prodClass.Id]);
		Map < String, Product_Class__c > prodPltformMapStrKey = new Map < String, Product_Class__c >([select id,Product_Attribute__c,Product_Attribute__r.Cadence_Platform__c from Product_Class__c where id=:prodClass.Id]);

		Map <string,Contact> contactMap = new Map < string,Contact>();
		Contact con1 = new Contact();
		con1.Parent_Account__c = parentAccount.id;
		con1.country__c = country.id;
		con1.Support_Level__c = 'Advanced Support';
		con1.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		con1.Email = 'test123qates@cadence.com';
		con1.street__c = 'test';
		con1.City__c = 'test';
		con1.FirstName='test';
		con1.LastName='test cndnce';
		contactMap.put(con.id,con1);

		System.assertNotEquals(null, resLUTMap);

		CaseAssignmentEngine_AC.LUTSupportLevelAssign(new Case(),resLUTMap,caseListData,prodPltformMap,contactMap);
		if(u1 != null){
			System.runAs(u1){
				insert caseRec2;
			}
		}else{
			insert caseRec2;
		}
		case createdCase1 = [select id,Support_Level__c,Support_Center__c from case where id=:caseRec2.id limit 1];
		contact createdCont1= [select id,Support_Level__c,Support_Center__c from contact where id=:con.id limit 1];
		Lookup_Table__c createdLUT= [select id,Support_Level__c,Support_Center__c from Lookup_Table__c where id=:lut1.id limit 1];
		System.assertEquals(createdLUT.Support_Level__c, createdCase1.Support_Level__c);

		CaseAssignmentEngine_AC.LUTSupportLevelAssign(new Case(),resLUTMap,caseListData,prodPltformMapStrKey,contactMap);

		Test.stopTest();

	 }

	@isTest
	static void GCSAssignmentMethod(){
		Id defaultRecordType = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Default').getRecordTypeId();
		list<Support_Address__c> CusSetlist = new list<Support_Address__c>();
		Support_Address__c CusSet = new Support_Address__c();
		CusSet.Name = 'Support TST';
		CusSet.EmailAddress__c = 'test@cadence.com';
		CusSet.Sender_Display__c = 'Cadence Support';
		CusSetlist.add(CusSet);
		Support_Address__c CusSet1 = new Support_Address__c();
		CusSet1.Name = 'DO_NOT_REPLY';
		CusSet1.EmailAddress__c = 'noreplytst@cadence.com';
		CusSet1.Sender_Display__c = 'noreply@cadence.com';
		CusSetlist.add(CusSet1);
		Support_Address__c CusSet2 = new Support_Address__c();
		CusSet2.Name = 'VIP Support';
		CusSet2.EmailAddress__c = 'test@cadence.com';
		CusSet2.Sender_Display__c = 'test@cadence.com';
		CusSetlist.add(CusSet2);
		insert CusSetlist;
		System.assertNotEquals(null, CusSetlist);

		Support_Center_Configuration__c scc = new Support_Center_Configuration__c();
		scc.Delay_Active__c=true;
		scc.Active__c=true;
		insert scc;
		System.assertNotEquals(null, scc);

		List<Case_Assignment_Interval__c> csIntervals = new List<Case_Assignment_Interval__c>{
			new Case_Assignment_Interval__c(Hours__c=18, Minutes__c=0, Name='CS DELAY'),
			new Case_Assignment_Interval__c(Hours__c=1, Minutes__c=0, Name='CS TEMP DELAY')
		};
		insert csIntervals;
		System.assertNotEquals(null, csIntervals);

		List<CaseAssignmentRelatedValues__c> caseRelVals = new List<CaseAssignmentRelatedValues__c>{new CaseAssignmentRelatedValues__c(ValueList__c = 'Silicon Package Board', Name = 'BUSummaryBypassDelay'),new CaseAssignmentRelatedValues__c(ValueList__c = 'Eval', Name = 'ProdStatusByPassDelay'),new CaseAssignmentRelatedValues__c(ValueList__c ='Palladium,Palladium XP', Name = 'ProdToCVASupport')};
		insert caseRelVals;
		System.assertNotEquals(null, caseRelVals);

		Support_Center_Configuration__c supportCenterConfig = new Support_Center_Configuration__c(Critical_Expert__c=0.0, Critical_Intermediate__c=3,
		   Critical_Novice__c=6, Important_Expert__c=7, Important_Intermediate__c=5, Important_Novice__c=3, Minor_Expert__c=6,
		   Minor_Intermediate__c=4, Minor_Novice__c=2, New__c=4, Transfer__c=0.0, Wait_CCR__c=0.0,Active__c=true,
		   Wait_Critical_CCR__c=1, Wait_Cust__c=1, Wait_Expert__c=1, Wait_Release__c=1, Working__c=2, Delay_Active__c=true );
		insert supportCenterConfig ;

		CaseAutoAssignment__c autAssigment= new CaseAutoAssignment__c();
		autAssigment.AutoAssignOnInsert__c = true;
		insert autAssigment;

		Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType(recTypeMap.get('Parent_Account'),true);
		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
			User u1 = TestContext.queryCadenceMigrationUser();
			if(u1 != null){
				System.runAs(u1){
					insert acc;
				}
			}else{
				insert acc;
			}
		Country__c country = TestUtils.createCountry('INDIA', true);
		System.assertNotEquals(null, acc);


		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Support_Level__c = 'standard';
		con.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		con.Email = 'test12@cadence.com';
		con.street__c = 'test';
		con.City__c = 'test';
		con.FirstName='test';
		con.LastName='test cndnce';
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		insert con;
		ContactTriggerHandler_AC.bypassUnifiedUser = false;
		System.assertNotEquals(null, con);

		Product_Class__c prod = new Product_Class__c();
		Product_Feature__c prodFeat = new Product_Feature__c();
		User prodSupportAgentUsers = new User();
		Group g1 = new Group ();

		User migrationUser = TestContext.queryCadenceMigrationUser();
		System.runAs(migrationUser){
		prod = TestUtils2.createProductClass(false);
		prod.Name = 'GCS';
		insert prod;

		prodFeat = TestUtils2.createProductFeature(false);
		prodFeat.Name = 'GCS';
		insert prodFeat;

		Product_Class__c prodCls = TestUtils2.createProductClass(true);

		 Prod_Cls_to_Feat_Jct__c prodClsProdFeat = new Prod_Cls_to_Feat_Jct__c(
								Product_Feature__c = prodFeat.id, Product_Class__c = prodCls.id);
		insert prodClsProdFeat;

		Product_Feature_Level_1__c prodFeatLevel1 = new Product_Feature_Level_1__c();
		prodFeatLevel1.Name = 'TestProductFeatLevel1';
		prodFeatLevel1.Product_Feature__c = prodFeat.id;
		insert prodFeatLevel1;

		Product_Attribute__c prodAtt = TestUtils2.createProductAttribute('GCS',false);
		prodAtt.Name = 'GCS';
		insert prodAtt;

		prodSupportAgentUsers = TestUtils.createUser(false);
		prodSupportAgentUsers.Region__c= 'GCS';
		prodSupportAgentUsers.Available_For_Support__c = true;
		prodSupportAgentUsers.IsActive = true;
		insert prodSupportAgentUsers;

		Product_Support_Agent__c psa = new Product_Support_Agent__c();
		psa.Product_Feature__c = prodFeat.Id;
		psa.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		psa.available__c = true;
		psa.Expertise__c='Intermediate';
		psa.isMigrated_Record__c=true ;
		psa.User__c=prodSupportAgentUsers.Id;

		insert psa;

		g1 = new Group(Name='CS_Temp', type='Queue');
		insert g1;
		QueuesObject q1 = new QueueSObject(QueueID = g1.id, SobjectType = 'Case');
		insert q1;
		}
		Test.startTest();
		Case caseRec1 = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'COS',
						ContactId =con.id,
						Product__c =  prod.Id,
						product_Feature__c  =  prodFeat.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.IN_DELAY_CS_TEMP , //DELAY_REASSIGN,IN_DELAY,IN_DELAY_CS_TEMP
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Product_Class_Name__c = 'Test',
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA,
						recordtypeid=defaultRecordType,
						//ownerid=g1.id,
						Override_Reason__c ='Test',
						Delay_Assignment_Date__c  = DateTime.Now()
						);
		// GCS Immediate Assignment for case creation
		insert caseRec1;

		//CaseAssignmentEngine_AC.caseReassign(caseRec1.Id);
		case createdCase = [select id,Support_Level__c,Support_Center__c,ownerid  from case where id=:caseRec1.id limit 1];
		system.debug('=====createdCase===='+createdCase);
		System.assertEquals(prodSupportAgentUsers.Id, createdCase.ownerid);

		// GCS Assignment for case in CS_TEMP delay
		createdCase.ownerid=g1.id;
		createdCase.Assignment_Status__c=CaseAssignmentEngine_AC.IN_DELAY_CS_TEMP;
		createdCase.Delay_Assignment_Date__c=DateTime.Now();
		update createdCase;
		CaseAssignmentEngine_AC.caseReassign(createdCase.Id);
		case createdCase1 = [select id,Support_Level__c,Support_Center__c,ownerid  from case where id=:caseRec1.id limit 1];
		system.debug('=====createdCase1===='+createdCase1);
		//System.assertEquals(prodSupportAgentUsers.Id, createdCase1.ownerid);
	Test.stopTest();
	}

	@isTest
	static void NACSAssignmentMethod(){
		Id defaultRecordType = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Default').getRecordTypeId();
		list<Support_Address__c> CusSetlist = new list<Support_Address__c>();
		Support_Address__c CusSet = new Support_Address__c();
		CusSet.Name = 'Support TST';
		CusSet.EmailAddress__c = 'test@cadence.com';
		CusSet.Sender_Display__c = 'Cadence Support';
		CusSetlist.add(CusSet);
		Support_Address__c CusSet1 = new Support_Address__c();
		CusSet1.Name = 'DO_NOT_REPLY';
		CusSet1.EmailAddress__c = 'noreplytst@cadence.com';
		CusSet1.Sender_Display__c = 'noreply@cadence.com';
		CusSetlist.add(CusSet1);
		Support_Address__c CusSet2 = new Support_Address__c();
		CusSet2.Name = 'VIP Support';
		CusSet2.EmailAddress__c = 'test@cadence.com';
		CusSet2.Sender_Display__c = 'test@cadence.com';
		CusSetlist.add(CusSet2);
		insert CusSetlist;
		System.assertNotEquals(null, CusSetlist);

		Support_Center_Configuration__c scc = new Support_Center_Configuration__c();
		scc.Delay_Active__c=true;
		scc.Active__c=true;
		insert scc;
		System.assertNotEquals(null, scc);

		List<Case_Assignment_Interval__c> csIntervals = new List<Case_Assignment_Interval__c>{
			new Case_Assignment_Interval__c(Hours__c=18, Minutes__c=0, Name='CS DELAY'),
			new Case_Assignment_Interval__c(Hours__c=1, Minutes__c=0, Name='CS TEMP DELAY')
		};
		insert csIntervals;
		System.assertNotEquals(null, csIntervals);

		List<CaseAssignmentRelatedValues__c> caseRelVals = new List<CaseAssignmentRelatedValues__c>{new CaseAssignmentRelatedValues__c(ValueList__c = 'Silicon Package Board', Name = 'BUSummaryBypassDelay'),new CaseAssignmentRelatedValues__c(ValueList__c = 'Eval', Name = 'ProdStatusByPassDelay'),new CaseAssignmentRelatedValues__c(ValueList__c ='Palladium,Palladium XP', Name = 'ProdToCVASupport')};
		insert caseRelVals;
		System.assertNotEquals(null, caseRelVals);

		Support_Center_Configuration__c supportCenterConfig = new Support_Center_Configuration__c(Critical_Expert__c=0.0, Critical_Intermediate__c=3,
		   Critical_Novice__c=6, Important_Expert__c=7, Important_Intermediate__c=5, Important_Novice__c=3, Minor_Expert__c=6,
		   Minor_Intermediate__c=4, Minor_Novice__c=2, New__c=4, Transfer__c=0.0, Wait_CCR__c=0.0,Active__c=true,
		   Wait_Critical_CCR__c=1, Wait_Cust__c=1, Wait_Expert__c=1, Wait_Release__c=1, Working__c=2, Delay_Active__c=true );
		insert supportCenterConfig ;

		CaseAutoAssignment__c autAssigment= new CaseAutoAssignment__c();
		autAssigment.AutoAssignOnInsert__c = true;
		insert autAssigment;

		Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType(recTypeMap.get('Parent_Account'),true);
		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
			User u1 = TestContext.queryCadenceMigrationUser();
			if(u1 != null){
				System.runAs(u1){
					insert acc;
				}
			}else{
				insert acc;
			}
		Country__c country = TestUtils.createCountry('INDIA', true);
		System.assertNotEquals(null, acc);


		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Support_Level__c = 'standard';
		con.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		con.Email = 'test1234@cadence.com';
		con.street__c = 'test';
		con.City__c = 'test';
		con.FirstName='test';
		con.LastName='test cndnce';
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		insert con;
		ContactTriggerHandler_AC.bypassUnifiedUser = false;
		System.assertNotEquals(null, con);

		Product_Class__c prod = new Product_Class__c();
		Product_Feature__c prodFeat = new Product_Feature__c();
		User prodSupportAgentUsers = new User();
		Group g1 = new Group ();

		User migrationUser = TestContext.queryCadenceMigrationUser();
		System.runAs(migrationUser){
		prod = TestUtils2.createProductClass(false);
		prod.Name = 'NACS';
		insert prod;

		prodFeat = TestUtils2.createProductFeature(false);
		prodFeat.Name = 'NACS';
		insert prodFeat;

		Product_Attribute__c prodAtt = TestUtils2.createProductAttribute('NACS',false);
		prodAtt.Name = 'NACS';
		insert prodAtt;

		prodSupportAgentUsers = TestUtils.createUser(false);
		prodSupportAgentUsers.Region__c= 'NACS';
		prodSupportAgentUsers.Available_For_Support__c = true;
		prodSupportAgentUsers.IsActive = true;
		insert prodSupportAgentUsers;

		Product_Support_Agent__c psa = new Product_Support_Agent__c();
		psa.Product_Feature__c = prodFeat.Id;
		psa.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		psa.available__c = true;
		psa.Expertise__c='Expert';
		psa.isMigrated_Record__c=true ;
		psa.User__c=prodSupportAgentUsers.Id;
		insert psa;

		g1 = new Group(Name='NO_CASE_OWNER', type='Queue');
		insert g1;
		QueuesObject q1 = new QueueSObject(QueueID = g1.id, SobjectType = 'Case');
		insert q1;
		}
		Test.startTest();
		Case caseRec1 = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'COS',
						ContactId =con.id,
						Product__c =  prod.Id,
						product_Feature__c  =  prodFeat.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT , //DELAY_REASSIGN,IN_DELAY,IN_DELAY_CS_TEMP
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Product_Class_Name__c = 'Test',
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA,
						recordtypeid=defaultRecordType,
						//ownerid=g1.id,
						Override_Reason__c ='Test',
						Delay_Assignment_Date__c  = DateTime.Now(),
						Priority = 'Critical',
						Support_Level__c = 'Advanced support'
						);
		// Case Assignment for Avialable NACS AE
		insert caseRec1;
		//CaseAssignmentEngine_AC.caseReassign(caseRec1.Id);
		case createdCase = [select id,Support_Level__c,Support_Center__c,ownerid from case where id=:caseRec1.id limit 1];
		system.debug('=====createdCase===='+createdCase);
		System.assertEquals(prodSupportAgentUsers.Id, createdCase.ownerid);

		//NO CASE OWNER Case Reassigning to Avialable NACS AE
		createdCase.ownerid=g1.id;
		createdCase.Assignment_Status__c=CaseAssignmentEngine_AC.NO_CASE_OWNER_STATUS;
		update createdCase;
		CaseAssignmentEngine_AC.caseReassign(caseRec1.Id);

		case createdCase1 = [select id,Support_Level__c,Support_Center__c,ownerid from case where id=:caseRec1.id limit 1];
		system.debug('=====createdCase1===='+createdCase1);
		//System.assertEquals(prodSupportAgentUsers.Id, createdCase1.ownerid);


		Test.stopTest();
	}



	@isTest
	static void DelayAssignmentMethod(){
		Id defaultRecordType = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Default').getRecordTypeId();
		list<Support_Address__c> CusSetlist = new list<Support_Address__c>();
		Support_Address__c CusSet = new Support_Address__c();
		CusSet.Name = 'Support TST';
		CusSet.EmailAddress__c = 'test@cadence.com';
		CusSet.Sender_Display__c = 'Cadence Support';
		CusSetlist.add(CusSet);
		Support_Address__c CusSet1 = new Support_Address__c();
		CusSet1.Name = 'DO_NOT_REPLY';
		CusSet1.EmailAddress__c = 'noreplytst@cadence.com';
		CusSet1.Sender_Display__c = 'noreply@cadence.com';
		CusSetlist.add(CusSet1);
		Support_Address__c CusSet2 = new Support_Address__c();
		CusSet2.Name = 'VIP Support';
		CusSet2.EmailAddress__c = 'test@cadence.com';
		CusSet2.Sender_Display__c = 'test@cadence.com';
		CusSetlist.add(CusSet2);
		insert CusSetlist;
		System.assertNotEquals(null, CusSetlist);

		Account_Type_Rule__c settingsInstance,settingsInstance1;

		settingsInstance = new Account_Type_Rule__c();
		settingsInstance.Name = 'Tieraccountrule';
		settingsInstance.Account_Type__c = 'Top,Focus,Tier1,Tier2';
		upsert settingsInstance;

		settingsInstance1 = new Account_Type_Rule__c();
		settingsInstance1.Name = 'nodelayrule';
		settingsInstance1.Account_Type__c = 'Non-Alliance Competitor,Industry Alliance';
		upsert settingsInstance1;

		Support_Center_Configuration__c scc = new Support_Center_Configuration__c();
		scc.Delay_Active__c=true;
		scc.Active__c=true;
		insert scc;
		System.assertNotEquals(null, scc);

		List<Case_Assignment_Interval__c> csIntervals = new List<Case_Assignment_Interval__c>{
			new Case_Assignment_Interval__c(Hours__c=18, Minutes__c=0, Name='CS DELAY'),
			new Case_Assignment_Interval__c(Hours__c=1, Minutes__c=0, Name='CS TEMP DELAY')
		};
		insert csIntervals;
		System.assertNotEquals(null, csIntervals);

		List<CaseAssignmentRelatedValues__c> caseRelVals = new List<CaseAssignmentRelatedValues__c>{new CaseAssignmentRelatedValues__c(ValueList__c = 'Silicon Package Board', Name = 'BUSummaryBypassDelay'),new CaseAssignmentRelatedValues__c(ValueList__c = 'Eval', Name = 'ProdStatusByPassDelay'),new CaseAssignmentRelatedValues__c(ValueList__c ='Palladium,Palladium XP', Name = 'ProdToCVASupport')};
		insert caseRelVals;
		System.assertNotEquals(null, caseRelVals);

		Support_Center_Configuration__c supportCenterConfig = new Support_Center_Configuration__c(Critical_Expert__c=0.0, Critical_Intermediate__c=3,
		   Critical_Novice__c=6, Important_Expert__c=7, Important_Intermediate__c=5, Important_Novice__c=3, Minor_Expert__c=6,
		   Minor_Intermediate__c=4, Minor_Novice__c=2, New__c=4, Transfer__c=0.0, Wait_CCR__c=0.0,Active__c=true,
		   Wait_Critical_CCR__c=1, Wait_Cust__c=1, Wait_Expert__c=1, Wait_Release__c=1, Working__c=2, Delay_Active__c=true );
		insert supportCenterConfig ;

		CaseAutoAssignment__c autAssigment= new CaseAutoAssignment__c();
		autAssigment.AutoAssignOnInsert__c = true;
		insert autAssigment;

		Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType(recTypeMap.get('Parent_Account'),true);
		parentAccount.Type = 'Non-Alliance Competitor';
		update parentAccount;
		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Non-Alliance Competitor';
			User u1 = TestContext.queryCadenceMigrationUser();
			if(u1 != null){
				System.runAs(u1){
					insert acc;
				}
			}else{
				insert acc;
			}
		Country__c country = TestUtils.createCountry('INDIA', true);
		System.assertNotEquals(null, acc);
		system.debug('====Account===='+acc);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Support_Level__c = 'standard';
		con.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		con.Email = 'test1235@cadence.com';
		con.street__c = 'test';
		con.City__c = 'test';
		con.FirstName='test';
		con.LastName='test cndnce';
		con.Accountid=acc.Id;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		insert con;
		ContactTriggerHandler_AC.bypassUnifiedUser = false;
		System.assertNotEquals(null, con);
		 system.debug('====Contact===='+con);

		Product_Class__c prod = new Product_Class__c();
		Product_Feature__c prodFeat = new Product_Feature__c();
		User prodSupportAgentUsers = new User();
		Group g1 = new Group ();

		User migrationUser = TestContext.queryCadenceMigrationUser();
		System.runAs(migrationUser){
		prod = TestUtils2.createProductClass(false);
		prod.Name = 'NACS';
		insert prod;

		prodFeat = TestUtils2.createProductFeature(false);
		prodFeat.Name = 'NACS';
		insert prodFeat;

		Product_Attribute__c prodAtt = TestUtils2.createProductAttribute('NACS',false);
		prodAtt.Name = 'NACS';
		insert prodAtt;

		prodSupportAgentUsers = TestUtils.createUser(false);
		prodSupportAgentUsers.Region__c= 'NACS';
		prodSupportAgentUsers.Available_For_Support__c = true;
		prodSupportAgentUsers.IsActive = true;
		insert prodSupportAgentUsers;

		/*
		Product_Support_Agent__c psa = new Product_Support_Agent__c();
		psa.Product_Feature__c = prodFeat.Id;
		psa.Support_Center__c = CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA;
		psa.available__c = true;
		psa.Expertise__c='Intermediate';
		psa.isMigrated_Record__c=true ;
		psa.User__c=prodSupportAgentUsers.Id;
		insert psa;
		*/
		g1 = new Group(Name='NO_CASE_OWNER', type='Queue');
		insert g1;
		QueuesObject q1 = new QueueSObject(QueueID = g1.id, SobjectType = 'Case');
		insert q1;
		}

		QueuedTaskAssignmentTable__c newAssignQueueTable = QueuedTaskAssignmentTable__c.getInstance('SSG_North_America');
		if(newAssignQueueTable == null){
			Id  idOfQueue = [Select Id from Group where Type = 'Queue' and Name = 'SSG_North_America'].Id;
			QueuedTaskAssignmentTable__c  qct = new QueuedTaskAssignmentTable__c(Name = 'SSG_North_America' , Queue_Id__c = idOfQueue);
			insert qct;
		}

		Test.startTest();
		Case caseRec1 = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId =con.id,
						Product__c =  prod.Id,
						product_Feature__c  =  prodFeat.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT , //DELAY_REASSIGN,IN_DELAY,IN_DELAY_CS_TEMP
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Product_Class_Name__c = 'Test',
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_NORTH_AMERICA,
						recordtypeid=defaultRecordType,
						//ownerid=g1.id,
						Override_Reason__c ='Test',
						Delay_Assignment_Date__c  = DateTime.Now(),
						Priority = 'Minor',
						Support_Level__c = 'Standard'
						);
		// Case Assignment for Avialable NACS AE
		insert caseRec1;
		//CaseAssignmentEngine_AC.caseReassign(caseRec1.Id);
		case createdCase = [select id,Support_Level__c,Support_Center__c,ownerid,Contact.Parent_Account_Type__c from case where id=:caseRec1.id limit 1];
		//system.debug('=====createdCase===='+createdCase);
		//system.debug('=====Account===='+createdCase.Contact.Parent_Account_Type__c);
		CaseAssignmentEngine_AC.caseReassign(caseRec1.Id);
		System.assertEquals('Non-Alliance Competitor', createdCase.Contact.Parent_Account_Type__c);
		Test.stopTest();
	}

	@isTest()
	static void dipNoEntitlementIPGSupportAssignScenario(){

		createDipTestData(false);
		string ipgQueueId= null;
		for(Group g:[Select Id, Name FROM Group Where Name=: 'IPG_SUPPORT']){
			ipgQueueId = g.id;
		}

		Case caseRecord = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case limit 1] ;

		// DIP Case non entilted assigned to IPG_SUPPORT
		system.debug('===========caseRecord============='+caseRecord);
		CaseAssignmentEngine_AC.caseReassign(caseRecord.Id);

		//Validate IPG Support queue Assignment
		Case cs =[Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case where id=:caseRecord.id];
		system.debug('==========dipNoEntitlementIPGSupportAssignScenario============='+cs);
		System.assertEquals(ipgQueueId,cs.ownerId );

	}//fn ends

	@isTest()
	static void dipEntitlementNoIPConfigAEAssignScenario(){

		createDipTestData(true);
		string kdtQueueId= null;
		for(Group g:[Select Id, Name FROM Group Where Name=: 'DIP_KDT_Queue']){
			kdtQueueId = g.id;
		}

		Case caseRecord = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case limit 1] ;

		// DIP Case entilted assigned to AE/DIP Support queue Assignment
		system.debug('===========caseRecord============='+caseRecord);
		CaseAssignmentEngine_AC.caseReassign(caseRecord.Id);

		//Validate AE/DIP Support queue Assignment
		Case cs = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case where id=:caseRecord.id];
		system.debug('==========dipEntitlementNoIPConfigAEAssignScenario============='+cs);
		System.assertNotEquals(kdtQueueId,cs.ownerId );

	}//fn ends

	@isTest()
	static void dipIPConfigBlankSourceAssignScenario(){

		createDipTestData(true);
		string kdtQueueId= null;
		for(Group g:[Select Id, Name FROM Group Where Name=: 'DIP_KDT_Queue']){
			kdtQueueId = g.id;
		}

		Case caseRecord = [Select id,Product_feature2__c,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case limit 1] ;

		Opportunity oppor = [Select id from Opportunity limit 1];
		Entitlement entRecord = [Select id,COPA_Integration_Id__c from Entitlement limit 1];
		IPCA_Approvers__c ipcaApprover = [Select id from IPCA_Approvers__c limit 1];

		// Create IP Config Addendum Record
		IP_Config__c ipConfig = new IP_Config__c();
		ipConfig.Databahn_Project__c='project1';
		ipConfig.Maintenance_End_Date__c=Date.today().addDays(20);
		ipConfig.COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c;
		ipConfig.Product_Feature__c = caseRecord.Product_feature2__c;
		ipConfig.Opportunity__c=oppor.Id;
		ipConfig.IP_Prod_Cat__c = ipcaApprover.id;
		ipConfig.Source__c =null;
		insert ipConfig;

		system.debug('===========caseRecord============='+caseRecord);
		CaseAssignmentEngine_AC.caseReassign(caseRecord.Id);

		//Validate DIP AE/DIP Support queue Assignment
		Case cs = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case where id=:caseRecord.id];
		system.debug('==========dipIPConfigBlankSourceAssignScenario============='+cs);
		System.assertNotEquals(kdtQueueId,cs.ownerId );
	}//fn ends

	@isTest()
	static void dipIPConfigKDTSourceAssignScenario(){

		createDipTestData(true);
		string kdtQueueId= null;
		for(Group g:[Select Id, Name FROM Group Where Name=: 'DIP_KDT_Queue']){
			kdtQueueId = g.id;
		}

		Case caseRecord = [Select id,Product_feature2__c,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case limit 1] ;

		Opportunity oppor = [Select id from Opportunity limit 1];
		Entitlement entRecord = [Select id,COPA_Integration_Id__c from Entitlement limit 1];
		IPCA_Approvers__c ipcaApprover = [Select id from IPCA_Approvers__c limit 1];

		// Create IP Config Addendum Record
		IP_Config__c ipConfig = new IP_Config__c();
		ipConfig.Databahn_Project__c='project1';
		ipConfig.Maintenance_End_Date__c=Date.today().addDays(20);
		ipConfig.COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c;
		ipConfig.Product_Feature__c = caseRecord.Product_feature2__c;
		ipConfig.Opportunity__c=oppor.Id;
		ipConfig.IP_Prod_Cat__c = ipcaApprover.id;
		ipConfig.Source__c ='KDT';
		insert ipConfig;

		system.debug('===========caseRecord============='+caseRecord);
		CaseAssignmentEngine_AC.caseReassign(caseRecord.Id);

		//Validate DIP KDT queue Assignment
		Case cs = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case where id=:caseRecord.id];
		system.debug('==========dipIPConfigKDTSourceAssignScenario============='+cs);
		System.assertEquals(kdtQueueId,cs.ownerId );

	}//fn ends

	@isTest()
	static void dipKDTAssigWithTwoDupIPConfScenario(){

		createDipTestData(true);
		string kdtQueueId= null;
		for(Group g:[Select Id, Name FROM Group Where Name=: 'DIP_KDT_Queue']){
			kdtQueueId = g.id;
		}

		Case caseRecord = [Select id,casenumber,Product_feature2__c,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case limit 1] ;

		// Create IP Config Addendum Record
		Opportunity oppor = [Select id from Opportunity limit 1];
		Entitlement entRecord = [Select id,COPA_Integration_Id__c from Entitlement limit 1];
		IPCA_Approvers__c ipcaApprover = [Select id from IPCA_Approvers__c limit 1];

		// IP Config Addendum 1 Record with Source__c ='KDT' and another record with COPA ID and Maintenance Date = blank
		List<IP_Config__c> ipConfigs = new List<IP_Config__c>();
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c ='KDT', Product_Feature__c = caseRecord.Product_feature2__c));
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', COPA_Integration_Id__c= null, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id,Source__c =null));
		insert ipConfigs;

		system.debug('===========caseRecord============='+caseRecord);
		// KDT Assignment with 2 IP config with below data
		//1. Source =KDT with COPA ID and End date >= todate
		//2. Source =Blank with COPA ID = Blank and End date = Blank
		CaseAssignmentEngine_AC.caseReassign(caseRecord.Id);

		//Validate DIP KDT queue Assignment
		Case cs = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case where id=:caseRecord.id];
		system.debug('==========dipKDTAssigWithTwoDupIPScenario============='+cs);
		System.assertEquals(kdtQueueId,cs.ownerId );

	}//fn ends
	@isTest()
	static void dipNonKDTAssigWithTwoDupConfIPScenario(){

		createDipTestData(true);
		string kdtQueueId= null;
		for(Group g:[Select Id, Name FROM Group Where Name=: 'DIP_KDT_Queue']){
			kdtQueueId = g.id;
		}

		Case caseRecord = [Select id,casenumber,Product_feature2__c,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case limit 1] ;

		// Create IP Config Addendum Record
		Opportunity oppor = [Select id from Opportunity limit 1];
		Entitlement entRecord = [Select id,COPA_Integration_Id__c from Entitlement limit 1];
		IPCA_Approvers__c ipcaApprover = [Select id from IPCA_Approvers__c limit 1];

		// IP Config Addendum 1 Record with Source__c ='KDT' and another record with COPA ID and Maintenance Date = blank
		List<IP_Config__c> ipConfigs = new List<IP_Config__c>();
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id));
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', COPA_Integration_Id__c= null, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c ='KDT'));
		insert ipConfigs;

		system.debug('===========caseRecord============='+caseRecord);
		// Non KDT Assignment with 2 IP config with below data
		//1. Source =Blank with COPA ID  and End date >= todate
		//2. Source =KDT with COPA ID = Blank and End date = Blank
		CaseAssignmentEngine_AC.caseReassign(caseRecord.Id);

		//Validate
		Case cs = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case where id=:caseRecord.id];
		system.debug('==========dipNonKDTAssigWithTwoDupIPScenario============='+cs);
		System.assertNotEquals(kdtQueueId,cs.ownerId);

	}//fn ends

	@isTest()
	static void dipKDTAssigWithThreeDupIPConfScenario(){

		createDipTestData(true);
		string kdtQueueId= null;
		for(Group g:[Select Id, Name FROM Group Where Name=: 'DIP_KDT_Queue']){
			kdtQueueId = g.id;
		}

		Case caseRecord = [Select id,casenumber,Product_feature2__c,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case limit 1] ;

		// Create IP Config Addendum Record
		Opportunity oppor = [Select id from Opportunity limit 1];
		Entitlement entRecord = [Select id,COPA_Integration_Id__c from Entitlement limit 1];
		IPCA_Approvers__c ipcaApprover = [Select id from IPCA_Approvers__c limit 1];

		// IP Config Addendum 2 Record with Source__c ='KDT' and another record with Source__c = blank
		List<IP_Config__c> ipConfigs = new List<IP_Config__c>();

		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c ='KDT' , Product_Feature__c = caseRecord.Product_feature2__c));
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c = 'KDT' , Product_Feature__c = caseRecord.Product_feature2__c));
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c = null , Product_Feature__c = caseRecord.Product_feature2__c));
		insert ipConfigs;

		// KDT Assignment with 3 IP config with below data
		//1. Source =KDT with COPA ID and End date >= todate
		//2. Source =KDT with COPA ID and End date >= todate
		//3. Source =Blank with COPA ID and End date >= todate
		system.debug('===========caseRecord============='+caseRecord);
		CaseAssignmentEngine_AC.caseReassign(caseRecord.Id);

		//Validate KDT Assignment
		Case cs = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case where id=:caseRecord.id];
		system.debug('===========dipKDTAssigWithThreeDupIPScenario============='+cs);
		System.assertEquals(kdtQueueId,cs.ownerId );

	}//fn ends

	@isTest()
	static void dipAssigWithMultipleKDTThreeDupIPConfScenario(){

		createDipTestData(true);
		string kdtQueueId= null;
		for(Group g:[Select Id, Name FROM Group Where Name=: 'DIP_KDT_Queue']){
			kdtQueueId = g.id;
		}

		Case caseRecord = [Select id,casenumber,Product_feature2__c,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case limit 1] ;

		// Create IP Config Addendum Record
		Opportunity oppor = [Select id from Opportunity limit 1];
		Entitlement entRecord = [Select id,COPA_Integration_Id__c from Entitlement limit 1];
		IPCA_Approvers__c ipcaApprover = [Select id from IPCA_Approvers__c limit 1];

		// IP Config Addendum 2 Record with Source__c ='KDT' and 1 Record with Source__c ='KDT1'
		List<IP_Config__c> ipConfigs = new List<IP_Config__c>();
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c ='KDT' , Product_Feature__c = caseRecord.Product_feature2__c));
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c = 'KDT1' , Product_Feature__c = caseRecord.Product_feature2__c));
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c = 'KDT' , Product_Feature__c = caseRecord.Product_feature2__c));
		insert ipConfigs;

		// KDT Assignment with 3 IP config with below data
		//1. Source =KDT with COPA ID and End date >= todate
		//2. Source =KDT1 with COPA ID and End date >= todate
		//3. Source =KDT with COPA ID  and End date >= todate
		system.debug('===========caseRecord============='+caseRecord);
		CaseAssignmentEngine_AC.caseReassign(caseRecord.Id);

		//Validate KDT Assignment
		Case cs = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case where id=:caseRecord.id];
		system.debug('===========dipAssigWithMultipleKDTThreeDupIPConfScenario============='+cs);
		System.assertEquals(kdtQueueId,cs.ownerId );

	}//fn ends

	@isTest()
	static void dipAssigWithNonKDTThreeDupIPConfScenario(){

		createDipTestData(true);
		string kdtQueueId= null;
		for(Group g:[Select Id, Name FROM Group Where Name=: 'DIP_KDT_Queue']){
			kdtQueueId = g.id;
		}

		Case caseRecord = [Select id,casenumber,Product_feature2__c,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case limit 1] ;

		// Create IP Config Addendum Record
		Opportunity oppor = [Select id from Opportunity limit 1];
		Entitlement entRecord = [Select id,COPA_Integration_Id__c from Entitlement limit 1];
		IPCA_Approvers__c ipcaApprover = [Select id from IPCA_Approvers__c limit 1];

		// IP Config Addendum 2 Record with Source__c ='KDT' and 1 Record with Source__c ='KDT1'
		List<IP_Config__c> ipConfigs = new List<IP_Config__c>();
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c ='KDT', Product_Feature__c = caseRecord.Product_feature2__c));
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c = 'KDT' , Product_Feature__c = caseRecord.Product_feature2__c));
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c = 'KDT1' , Product_Feature__c = caseRecord.Product_feature2__c));
		insert ipConfigs;

		// Non KDT Assignment (Any AE) with 3 IP config with below data
		//1. Source =KDT with COPA ID and End date >= todate
		//2. Source =KDT with COPA ID and End date >= todate
		//3. Source =KDT1 with COPA ID and End date >= todate (but no queue found)
		system.debug('===========caseRecord============='+caseRecord);
		CaseAssignmentEngine_AC.caseReassign(caseRecord.Id);

		//Validate
		Case cs = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case where id=:caseRecord.id];
		system.debug('===========dipAssigWithNonKDTThreeDupIPConfScenario============='+cs);
		System.assertNotEquals(kdtQueueId,cs.ownerId );

	}//fn ends

	@isTest()
	static void dipAssigWithNoQueueScenario(){

		createDipTestData(true);
		string kdtQueueId= null;
		for(Group g:[Select Id, Name FROM Group Where Name=: 'DIP_KDT_Queue']){
			kdtQueueId = g.id;
		}

		Case caseRecord = [Select id,casenumber,Product_feature2__c,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case limit 1] ;

		Opportunity oppor = [Select id from Opportunity limit 1];
		Entitlement entRecord = [Select id,COPA_Integration_Id__c from Entitlement limit 1];
		IPCA_Approvers__c ipcaApprover = [Select id from IPCA_Approvers__c limit 1];

		// Create IP Config Addendum Record
		// IP Config Addendum Record 1 Record with Source__c ='KDT3'
		List<IP_Config__c> ipConfigs = new List<IP_Config__c>();
		ipConfigs.add(new IP_Config__c(Databahn_Project__c='project1', Maintenance_End_Date__c=Date.today().addDays(20),
								 COPA_Integration_Id__c= entRecord.COPA_Integration_Id__c, Opportunity__c=oppor.Id, IP_Prod_Cat__c = ipcaApprover.id, Source__c ='KDT3' , Product_Feature__c = caseRecord.Product_feature2__c));
		insert ipConfigs;

		// Non KDT Assignment (Any AE) with 3 IP config with below data
		//1. Source =KDT3 with COPA ID and End date >= todate
		//2. Source =Blank with COPA ID and End date >= todate
		//2. Source =Blank with COPA ID and End date >= todate
		system.debug('===========caseRecord============='+caseRecord);
		CaseAssignmentEngine_AC.caseReassign(caseRecord.Id);

		//Validate
		Case cs = [Select id,casenumber,Subject,ownerid,Enterprise_Project_Name__c,Assignment_Reason__c from case where id=:caseRecord.id];
		system.debug('==========dipAssigWithNoQueueScenario============='+cs);
		System.assertNotEquals(kdtQueueId,cs.ownerId );

	}//fn ends

	 // Common test data creation for DIP case creation
	private static void createDipTestData(Boolean isInsertEntitlement){
		User migUsr = TestContext.queryCadenceMigrationUser();
		System.runAs(migUsr){
			Test.startTest();
			// Support Address Custom setting record
			Support_Address__c supAddress = new Support_Address__c();
			supAddress.Name = 'Support TST';
			supAddress.EmailAddress__c = 'test@cadence.com';
			supAddress.Sender_Display__c = 'Cadence Support';
			insert supAddress;

			COSEntitlementBatchProcessEmail__c cosEntitleCustomSetting = new COSEntitlementBatchProcessEmail__c();
			cosEntitleCustomSetting.Name='COSBatchError';
			cosEntitleCustomSetting.Email_Subject__c = 'test Email';
			cosEntitleCustomSetting.Primary_Recipient__c = 'test@abc.com';
			cosEntitleCustomSetting.Send_Email__c =false;
			insert cosEntitleCustomSetting;

			CaseAutoCompletedClosedSettings__c setting = CaseAutoCompletedClosedSettings__c.getOrgDefaults();
			setting.InDays__c=true;
			setting.Auto_Close_Days_DIP__c='1';
			setting.Auto_Close_Days_TIP__c='1';
			setting.Auto_Close_Days_VIP__c='1';
			setting.Auto_Complete_Days_DIP__c='1';
			setting.Auto_Complete_Days_TIP__c='1';
			setting.Auto_Complete_Days_VIP__c='1';
			setting.Auto_Notification_Days_DIP__c='1';
			setting.Auto_Notification_Days_TIP__c='1';
			setting.Auto_Notification_Days_VIP__c='1';
			setting.Failure_Email_Frequency_In_Hours__c='1';
			setting.Auto_Close_Days_Ecom__c='1';
			upsert setting;

			insert new List <CadenceSSOConfiguration__c> {
				new CadenceSSOConfiguration__c(Name = 'REFKEYACCOUNTID', Value__c = '001d000000HqU8K'),
				new CadenceSSOConfiguration__c(Name = 'REFKEYPARENTACCOUNTID', Value__c = '001d000000HqRCR'),
				new CadenceSSOConfiguration__c(Name = 'ECOMPRIMARYACCOUNTID', Value__c = '001c0000038PXET'),
				new CadenceSSOConfiguration__c(Name = 'ECOMACCOUNTID', Value__c = '001c0000038PXES')
			};
			// Assign the KDT queue to dipProjectQueueMap
			string kdtQueId = null;
			for(Group g:[Select Id, Name FROM Group Where Name=: 'DIP_KDT_Queue']){
				kdtQueId = g.id;
			}
			CaseAssignmentEngine_AC.dipProjectQueueMap.put('KDT',kdtQueId);

			// DIP Product creation
			prodDIP = TestUtils2.createProductClass(false);
			prodDIP.Name = 'Design IP';
			insert prodDIP;

			// Product Feature and Product Feature Version record creation
			Product_Feature__c prodFeat = TestUtils2.createProductFeature(true);
			Product_Feature_Version__c prodFeatVersion = new Product_Feature_Version__c();
			prodFeatVersion.Name = 'TestProductFeatVersion';
			prodFeatVersion.Product_Feature__c = prodFeat.id;
			insert prodFeatVersion;

			Prod_Cls_to_Feat_Jct__c prodClsProdFeat = new Prod_Cls_to_Feat_Jct__c(
								Product_Feature__c = prodFeat.id, Product_Class__c = prodDIP.id);
			insert prodClsProdFeat;

			// Country record creation
			Country__c country = TestUtils.createCountry('INDIA', true);

			// Required for Opportunity insert
			TestDataFactory.createTransactionMap();
			TestDataFactory.createTransactionflowname();
			TestDataFactory.OpportunityAgreementMap();
			TestDataFactory.createOpportunityBillingPlan();
			TestDataFactory.createOpportunityPaymentTerms();
			TestDataFactory.createOpportunityServiceType();
			TestDataFactory.createOpportunityTransType();
			TestDataFactory.createCalcVariables();

			// Account record creation
			AccountTriggerHandler_AC.isByPassTrigger=true;
			Map<String,String> recTypeMap = getRecTypeMap();
			Account parentAccount = TestUtils.createAccountWithRecordType(recTypeMap.get('Parent_Account'),true);
			Account acc = TestUtils.createAccount(false);
			acc.Status__c = 'Active';
			acc.ParentId = parentAccount.id;
			insert acc;
			AccountTriggerHandler_AC.isByPassTrigger=false;

			// Contact record creation
			Contact con = new Contact();
			con = TestUtils.createContact(acc.Id, false);
			con.firstname = 'Dip';
			con.lastname = 'Test user 1';
			con.Parent_Account__c = acc.id;
			con.accountId = parentAccount.id;
			con.country__c = country.id;
			con.Support_Level__c = 'Advanced Support';
			con.Email = 'dipkdttestuser@cssotest.com';
			insert con;

			// Opportunity record creation
			Opportunity oppor = new Opportunity();
			oppor = TestContext.createOpportunity(acc.Id, false);
			oppor.RecordTypeId = TestCOntext.recordTypemapForOpp.get('IP');
			oppor.Apex_Context2__c = true;
			insert oppor;

			// Default Entitlement record creation
			Default_Entitlement__c defEnt = new Default_Entitlement__c();
			defEnt.name = 'Default';
			defEnt.Default_Process__c = 'Cadence Entitlement Process 1/25';
			insert defEnt;

			// IPCA Approver record creation
			IPCA_Approvers__c ipca = new IPCA_Approvers__c();
			ipca.name ='';
			ipca.All__c ='test';
			ipca.Status__c = 'Active';
			insert ipca;

			if(isInsertEntitlement){
				string copaId ='123456789';

				// Entitlement Contact record creation
				List<Entitlement> entitlements = new List<Entitlement>();
				Entitlement ent1 = TestContext.createEntitlement(acc.Id, parentAccount.Id, Date.today().addDays(-100), Date.today().addDays(100), false);
				ent1.COPA_Integration_Id__c = copaId;
				entitlements.add(ent1);
				insert entitlements;

				List<EntitlementContact> entContacts = new  List<EntitlementContact>();
				entContacts.add(new EntitlementContact (EntitlementId= ent1.Id, ContactId= con.Id));

				insert entContacts;
			}

			Id dipRecTyp = Schema.SObjectType.Case.getRecordTypeInfosByName().get('DIP').getRecordTypeId();
			// COS DIP Case Creation with IP Config Addendum Record Source = KDT, case assigned to DIP_KDT_queue
			Case newCaseRecord = new Case(Status = 'New', Subject = 'DIP KDT assignment testing',
			Description = 'DIP KDT no assignment testing',
			Origin = 'COS',
			contactId =  con.id,
			Product__c =  prodDIP.id,
			product_Feature__c = prodFeat.id,
			Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
			Trigger_Bypass__c = true,
			Assignment_Made__c = false,
			Product_Feature2__c = prodClsProdFeat.id,
			Enterprise_Project_Name__c ='project1',
			recordtypeid=dipRecTyp);
			insert newCaseRecord;
			Test.stopTest();
		}
	}//fn ends


  @isTest(SeeAllData=false)
	static void testQueueAssignmentWithOriginTaiwan(){

		Id defaultRecordType = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Default').getRecordTypeId();

		Test.StartTest();
		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'XYZ123';

		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='test';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		Integer i=0;

		List<Case> cases = new List<Case>();
		for(i=0;i< 2;i++){
			cases.add(new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Email - Taiwan',
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						recordtypeid=defaultRecordType,
						Product__c=prodTEMP.Id,
						Product_Feature__c=pFeature.Id
						));
		}

		insert cases;

		CaseAssignmentEngine_AC.assignMultipleCases(cases, null, true);


		for(i=0;i< 2;i++){
		  cases[i].Origin='Email - Korea';
		}
		update cases;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null, true);

		for(i=0;i< 2;i++){
		  cases[i].Origin='Email - China';
		}
		update cases;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null, true);

		for(i=0;i< 2;i++){
		  cases[i].Origin='Email - France';
		}
		update cases;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null, true);

		for(i=0;i< 2;i++){
		  cases[i].Origin='Email - Germany';
		}
		update cases;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null, true);

		for(i=0;i< 2;i++){
		  cases[i].Origin='Email - Singapore';
		}
		update cases;
		CaseAssignmentEngine_AC.assignMultipleCases(cases, null, true);

		Test.StopTest();

	 }

   @isTest(seeAllData = false)
	static void testRadarCases(){

	  List<Case> cases = new List<Case>();

		 Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType( recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'India';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('INDIA', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;


	   recordtype r=[select id from recordtype where sobjecttype='case' limit 1];


	  prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'XYZ123';

		insert prodTEMP;

			 Product_Feature__c pFeature = new Product_Feature__c();
			pFeature.Name = 'I2C - Inter IC';
			pFeature.Active_Flag__c = true;
			insert pFeature;

			QueueAssignment__c qAssignment = new QueueAssignment__c();
			qAssignment.Name='testQueueAssignment';
			qAssignment.Product__c=prodTEMP.Id;
			qAssignment.Product_Feature__c=pFeature.Id;
			qAssignment.Support_Center__c = '';
			qAssignment.BU_Summary__c='ALL';
			qAssignment.Account__c=null;
			qAssignment.Task_Types__c='ACR';

			insert qAssignment;

	   Test.startTest();

		Case newcase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Radar',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Priority ='Critical',
						Assignment_Status__c = 'ASSIGNED',
						recordtypeid=r.id,
						Override_Reason__c  ='HDS Support',
						BU_Summary_Attribute__c='ALL',
						Product_Class_Name__c = 'Design IP',
						extCustomer_Project_Name__c = 'elba',
						Assignment_Reason__c = 'Radar elba Assignment'
						);

		  cases.add(newCase);

			  insert cases;



		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		 qAssignment.BU_Summary__c='';
		 qAssignment.product_Feature__c = null;
		 qAssignment.Task_Types__c='ACR';
		 update qAssignment;

		cases[0].extCustomer_Project_Name__c = 'myst';
		cases[0].Assignment_Reason__c = 'Radar myst Assignment';

		update cases;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);


		 qAssignment.Support_Center__c = '';
		 qAssignment.Account__c=parentAccount.Id;
		 qAssignment.BU_Summary__c='test';
		 qAssignment.Product_Feature__c=null;
		 update qAssignment;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		qAssignment.BU_Summary__c='';
		 update qAssignment;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		 Test.stopTest();
	}

	@isTest(seeAllData = false)
	static void testRadarCases_1(){


		   List<Case> cases = new List<Case>();


		 Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'India';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('INDIA', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

	   recordtype r=[select id from recordtype where sobjecttype='case' limit 1];

	  prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'XYZ123';

		insert prodTEMP;

			 Product_Feature__c pFeature = new Product_Feature__c();
			pFeature.Name = 'I2C - Inter IC';
			pFeature.Active_Flag__c = true;
			insert pFeature;

			QueueAssignment__c qAssignment = new QueueAssignment__c();
			qAssignment.Name='testQueueAssignment';
			qAssignment.Product__c=prodTEMP.Id;
			qAssignment.Product_Feature__c=pFeature.Id;
			qAssignment.Support_Center__c = 'India';
			qAssignment.BU_Summary__c='';
			qAssignment.Account__c=parentAccount.Id;
			qAssignment.Task_Types__c='ACR';

			insert qAssignment;

	   Test.startTest();

		Case newcase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Priority ='Critical',
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						recordtypeid=r.id,
						Override_Reason__c  ='HDS Support',
						BU_Summary_Attribute__c=''
						);

		  cases.add(newCase);

			  insert cases;



		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		 qAssignment.BU_Summary__c='test';
		 update qAssignment;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		  qAssignment.product_Feature__c=null;
		qAssignment.BU_Summary__c='ALL';
		 update qAssignment;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		qAssignment.product_Feature__c=null;
		qAssignment.BU_Summary__c='';
		 update qAssignment;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		 Test.stopTest();

  }


	 @isTest(seeAllData = false)
	static void testRadarCases_2(){

		List<Case> cases = new List<Case>();


		 Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType(recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'India';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('INDIA', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

	   recordtype r=[select id from recordtype where sobjecttype='case' limit 1];

		 prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'XYZ123';

		insert prodTEMP;

			 Product_Feature__c pFeature = new Product_Feature__c();
			pFeature.Name = 'I2C - Inter IC';
			pFeature.Active_Flag__c = true;
			insert pFeature;

			QueueAssignment__c qAssignment = new QueueAssignment__c();
			qAssignment.Name='testQueueAssignment';
			qAssignment.Product__c=prodTEMP.Id;
			qAssignment.Product_Feature__c=pFeature.Id;
			qAssignment.Support_Center__c = 'India';
			qAssignment.BU_Summary__c='ALL';
			qAssignment.Account__c=null;
			qAssignment.Task_Types__c='ACR';
			insert qAssignment;

	   Test.startTest();

		Case newcase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						recordtypeid=r.id,
						Override_Reason__c  ='HDS Support'
						);

		  cases.add(newCase);

		   insert cases;



		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		qAssignment.BU_Summary__c='';
		 update qAssignment;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		qAssignment.product_Feature__c=null;
		qAssignment.BU_Summary__c='ALL';
		 update qAssignment;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		qAssignment.product_Feature__c=null;
		qAssignment.BU_Summary__c='';
		 update qAssignment;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		 Test.stopTest();

  }

   @isTest(seeAllData = false)
	static void testRadarCases_3(){

		List<Case> cases = new List<Case>();


		 Map<String,String> recTypeMap = getRecTypeMap();
		Account parentAccount = TestUtils.createAccountWithRecordType(recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'India';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('INDIA', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

	   recordtype r=[select id from recordtype where sobjecttype='case' limit 1];

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'XYZ123';

		insert prodTEMP;

			 Product_Feature__c pFeature = new Product_Feature__c();
			pFeature.Name = 'I2C - Inter IC';
			pFeature.Active_Flag__c = true;
			insert pFeature;

			QueueAssignment__c qAssignment = new QueueAssignment__c();
			qAssignment.Name='testQueueAssignment';
			qAssignment.Product__c=prodTEMP.Id;
			qAssignment.Product_Feature__c=pFeature.Id;
			qAssignment.BU_Summary__c='ALL';
			qAssignment.Account__c=parentAccount.Id;
			qAssignment.Task_Types__c='ACR';
			insert qAssignment;

		Test.startTest();

		Case newcase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						recordtypeid=r.id,
						Override_Reason__c  ='HDS Support'
						);

		  cases.add(newCase);

		   insert cases;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);

		qAssignment.BU_Summary__c='';
		 update qAssignment;

		 CaseAssignmentEngine_AC.alreadyRan = false;
		 CaseAssignmentEngine_AC.assignMultipleCases(cases, null , false);


		 Test.stopTest();

  }

	@isTest(seeAllData=false)
	static void testTierAccountAssignments() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'North America';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('INDIA', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='North America',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}


		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();

	}

  @isTest(seeAllData=false)
 static void testTierAccountAssignments_a1() {

		Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);
		List<Product_Class__c> products = new List<Product_Class__c>();

		List<Account> accounts = new List<Account>();

	   Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'North America';
		accounts.add( acc);

		Account acc2 = TestUtils.createAccount(false);
		acc2.ParentId = parentAccount.id;
		acc2.Status__c = 'Active';
		acc2.Type = 'Focus';
		acc2.Support_Level__c='Premium';
		acc2.Support_Center__c = 'North America';
		accounts.add( acc2);

		Account acc3 = TestUtils.createAccount(false);
		acc3.ParentId = parentAccount.id;
		acc3.Status__c = 'Active';
		acc3.Type = 'Geography';
		acc3.Support_Level__c='Standard';
		acc3.Support_Center__c = 'North America';
		accounts.add( acc3);

		UserTriggerHandler_AC.ProvUSER_BYPASS = true;
		UserTriggerHandler_AC.USER_BYPASS = true;
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert accounts;
		   }
	   }else{
		   insert accounts;
	   }

		Country__c country = TestUtils.createCountry('INDIA', true);

		List<Contact> contacts = new List<Contact>();

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		contacts.add(con);

		Contact con1 = TestUtils.createContact(acc2.Id, false);
		con1.Parent_Account__c = parentAccount.id;
		con1.country__c = country.id;
		con1.Email = 'test1@cadence.com';
		contacts.add(con1);

		Contact con2 = TestUtils.createContact(acc3.Id, false);
		con2.Parent_Account__c = parentAccount.id;
		con2.country__c = country.id;
		con2.Email = 'test2@cadence.com';
		contacts.add(con2);
		insert contacts;

		Product_Attribute__c prodAtt = TestUtils2.createProductAttribute('Silicon Package Board', true);

		Product_Class__c prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		products.add(prodTEMP);

		Product_Class__c prodSPB = TestUtils2.createProductClass(false);
		prodSPB.Product_Attribute__c = prodAtt.Id;
		prodSPB.Name = 'testSPBProduct';
		products.add(prodSPB);

		insert products;

		Product_Feature__c prodFeat = TestUtils2.createProductFeature(true);
		 Prod_Cls_to_Feat_Jct__c prodClsProdFeat = new Prod_Cls_to_Feat_Jct__c(
								Product_Feature__c = prodFeat.id, Product_Class__c = prodTEMP.id);
		insert prodClsProdFeat;


		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodSPB.Id;
		qAssignment.Product_Feature__c=prodFeat.Id;
		qAssignment.BU_Summary__c='test';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		List<Case> cases = new List<Case>();
		Case newT1Case = createDummyCase1(r);
		newT1Case.Priority = 'Critical';
		newT1Case.contactId = con.Id;
		newT1Case.Product__c = prodTEMP.Id;

		cases.add(newT1Case);

		Case newT2Case = createDummyCase1(r);
		newT2Case.Priority = 'Critical';
		newT2Case.contactId = con1.Id;
		newT2Case.Product__c = prodTEMP.Id;
		cases.add(newT2Case);

		Case newT3Case = createDummyCase1(r);
		newT3Case.Priority = 'Critical';
		newT3Case.contactId = con2.Id;
		newT3Case.Product__c = prodSPB.Id;
		newT3Case.BU_Summary_Attribute__c = qAssignment.BU_Summary__c;
		cases.add(newT3Case);

		Case newCase2 = createDummyCase1(r);
		newCase2.Priority = 'Critical';
		newCase2.contactId = con2.Id;
		newCase2.Product__c = prodTEMP.Id;
		newCase2.BU_Summary_Attribute__c = qAssignment.BU_Summary__c;

		cases.add(newCase2);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert cases;
		}
		}else{
				insert cases;
		}
		CaseAssignmentEngine_AC.assignMultipleCases(cases, null, true);

	}


	private static Case createDummyCase1(recordtype r){
		return new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						Support_Center__c = 'North America',
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,recordtypeid=r.id);
	}

/*	@isTest(seealldata = true)
	static void testchatterpost(){
   Test.StartTest();
		Map<Integer, Case> asgCaseChatterMap = new Map<Integer, Case>();
		Integer caseIndx  = 0;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'Design IP';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
			pFeature.Name = 'DPHY';
			pFeature.Active_Flag__c = true;
			insert pFeature;

		 Id defaultRecordType = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Default').getRecordTypeId();

		List<Case> cases = new List<Case>();

		Case caseRec = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'COS',
						ContactId =null,
						Product__c =  prodTEMP.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Trigger_Bypass__c = true,
						Assignment_Made__c = false,
						Product_Class_Name__c = 'Memory Model',
						product_Feature__c = pFeature.Id,
						Support_Center__c =CaseAssignmentEngine_AC.SUPPORT_INDIA,
						recordtypeid=defaultRecordType);

		cases.add(caseRec);

		insert cases;

		User migrationUser = null;
		for(User u : [Select Id, Name From User where Name = 'Cadence Migration' Limit 1]){
				migrationUser = u;
		}

		Group grp = createGroup('grpTest');
		insert grp;

		CollaborationGroup chatterGrp = new CollaborationGroup(Description='ChatterGrp', CollaborationType='Public', Name='ChatterGrp');
		insert chatterGrp;

		// asgCaseChatterMap.add(cases[0]);
		 asgCaseChatterMap.put(caseIndx, cases[0]);

		// create feed items
		 List<FeedItem> FeedItemList = new List<FeedItem>();
		 FeedItem post =  new FeedItem();
		 post.ParentId = chatterGrp.Id;
		 post.LinkUrl = System.Label.Case_Base_URL + '/'+ cases[0].Id;
		 post.Body = post.Body + '\nProduct: ' + cases[0].Product_Class_Name__c;
		 post.Body = post.Body + '\nProduct Feature: ' + cases[0].product_Feature__c;
		 post.Title = 'Case #' + cases[0].CaseNumber;


		 FeedItemList.add(post);
		 insert FeedItemList;

		 CaseAssignmentEngine_AC.logChatterToGroupPostInsert(cases);

	 Test.StopTest();

	}
*/

	private static void createTestData(){


		TSMC_Helper__c t = [SELECT Id,Name FROM TSMC_Helper__c where name='TSMC_EMT_LOGIN_IDS'];
		if(t == null){
			t = new TSMC_helper__c(name='TSMC_EMT_LOGIN_IDS',Value__c='beckley;ccteng;smandava;zaman');
			insert t;
		}
		
		Account AccChildObj = [Select id From Account WHERE ParentId!=NULL limit 1];
		List<Opportunity> opptyList = new List<Opportunity>();
		Opportunity parenttestOpportunity1Obj = new Opportunity();
		parenttestOpportunity1Obj.Name = 'demo Opportunity';
		parenttestOpportunity1Obj.AccountId = AccChildObj.Id;
		parenttestOpportunity1Obj.CloseDate = Date.today();
		parenttestOpportunity1Obj.StageName = 'Lost';
		parenttestOpportunity1Obj.Region__c = 'EMEA';
		parenttestOpportunity1Obj.Type = 'VIP';
		parenttestOpportunity1Obj.tcv__c = 1000;
		parenttestOpportunity1Obj.StageName = '10%';
		parenttestOpportunity1Obj.Transaction_Type__c=System.Label.Oppty_TransType_IPTensilica;
		parenttestOpportunity1Obj.IP_Tensilica_Product_Category__c = 'HiFi Audio';
		parenttestOpportunity1Obj.RecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('IP').getRecordTypeId();
		parenttestOpportunity1Obj.Deal_Review_Type__c = 'IP';
		parenttestOpportunity1Obj.Term__c = 12;
		parenttestOpportunity1Obj.Probability = 25;
		parenttestOpportunity1Obj.Compelling_event_non_IP__c = 'Budget Access/Expiration';
		parenttestOpportunity1Obj.IVP_Core__c = 'IVP Core';
		Utility_global_var.byPassOpportunityTrigger = true;
		insert parenttestOpportunity1Obj;
		IPCA_Approvers__c ipca = new IPCA_Approvers__c(Name='DDR Controller');
		insert ipca;

		IP_Config__c ip1 = new IP_Config__c(Databahn_Project__c = '147852369', IP_Prod_Cat__c = ipca.Id,
			Opportunity__c = parenttestOpportunity1Obj.Id);

		IP_Config__c ip2 = new IP_Config__c(Databahn_Project__c = '123698745', IP_Prod_Cat__c = ipca.Id,
			Opportunity__c = parenttestOpportunity1Obj.Id);
		insert new List<IP_Config__c>{ip1, ip2};

		ID__c ipa = new ID__c(Name='Other-IP Config Addendum', Value__c='Other/Other', ID__c=ip2.Id);
		insert ipa;

		User u = TestUtils.createUser(false);
		u.username = 'testuser12346@cadence.com';
		u.Available_For_Support__c = true;
		u.Employment_Status__c = 'Available';
		u.IsActive = true;
		insert u;

		System.runAs(u){
			testCase = createCaseWithProductFields(u);
			testCase.Subject='test';
			testCase.Origin='Manual';
			testCase.Priority ='High';
			testCase.Description = 'test';
			testCase.Description__c = 'test';
			insert testCase;
		}

	}

	  private static Case createCaseWithProductFields(User user) {

		List<Product_Class__c> products = new List<Product_Class__c>();

		Product_Class__c prodCls = TestUtils2.createProductClass(false);
	   // prodCls.Name = 'Design IP';
		products.add( prodCls);

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'XYZ123';
		products.add( prodTEMP);

		prodDIP = TestUtils2.createProductClass(false);
		prodDIP.Name = 'Design IP';
		products.add(prodDIP);

		prodEOT = TestUtils2.createProductClass(false);
		prodEOT.Name = 'EdaOnTap';
		products.add(prodEOT);

		prodHAP = TestUtils2.createProductClass(false);
		prodHAP.Name = 'Hosted: Applications/Packages';
		products.add(prodHAP);

		prodHCI = TestUtils2.createProductClass(false);
		prodHCI.Name = 'Hosted: Chamber Infrastructure';
		products.add(prodHCI);

		prodHCA = TestUtils2.createProductClass(false);
		prodHCA.Name = 'Hosted: Connectivity/Access';
		products.add(prodHCA);

		prodHTM = TestUtils2.createProductClass(false);
		prodHTM.Name = 'Hosted: Technology/Methodology';
		products.add(prodHTM);

		prodSIT = TestUtils2.createProductClass(false);
		prodSIT.Name = 'Sigrity Power and Signal Integrity';
		products.add(prodSIT);

		prodILS = TestUtils2.createProductClass(false);
		prodILS.Name = 'Internet Learning Series';
		products.add(prodILS);

		prodVIP = TestUtils2.createProductClass(false);
		prodVIP.Name = 'Verification IP';
		products.add(prodVIP);

		insert products;



		Product_Feature__c prodFeat = TestUtils2.createProductFeature(true);
		Prod_Cls_to_Feat_Jct__c prodClsProdFeat = new Prod_Cls_to_Feat_Jct__c(
								Product_Feature__c = prodFeat.id, Product_Class__c = prodCls.id);
		insert prodClsProdFeat;
		Product_Feature_Level_1__c prodFeatLevel1 = new Product_Feature_Level_1__c();
		prodFeatLevel1.Name = 'TestProductFeatLevel1';
		prodFeatLevel1.Product_Feature__c = prodFeat.id;
		insert prodFeatLevel1;

		Product_Feature_Level_2__c prodFeatLevel2 = new Product_Feature_Level_2__c();
		prodFeatLevel2.Name = 'TestProductFeatLevel2';
		prodFeatLevel2.Product_Feature_Level_1__c = prodFeatLevel1.id;
		insert prodFeatLevel2;

		Product_Feature_Version__c prodFeatVersion = new Product_Feature_Version__c();
		prodFeatVersion.Name = 'TestProductFeatVersion';
		prodFeatVersion.Product_Feature__c = prodFeat.id;
		insert prodFeatVersion;

	   Product_Support_Agent__c prodSuppAgent = new Product_Support_Agent__c(Available__c = true,  CurrencyIsoCode='USD', Expertise__c='Intermediate',
						isMigrated_Record__c=true, Product_Feature__c=prodFeat.Id ,Support_Center__c='India', User__c=user.Id);
		insert prodSuppAgent ;

		Support_Center_Configuration__c supportCenterConfig = new Support_Center_Configuration__c(Critical_Expert__c=0.0, Critical_Intermediate__c=3,
		   Critical_Novice__c=6, Important_Expert__c=7, Important_Intermediate__c=5, Important_Novice__c=3, Minor_Expert__c=6,
		   Minor_Intermediate__c=4, Minor_Novice__c=2, New__c=4, Transfer__c=0.0, Wait_CCR__c=0.0,Active__c=true,
		   Wait_Critical_CCR__c=1, Wait_Cust__c=1, Wait_Expert__c=1, Wait_Release__c=1, Working__c=2, Delay_Active__c=true );
		insert supportCenterConfig ;

		Group grp = createGroup('grpTest');
		insert grp;

		CollaborationGroup chatterGrp = new CollaborationGroup(Description='ChatterGrp', CollaborationType='Public', Name='ChatterGrp');
		insert chatterGrp;
		/*CollaborationGroup chatterGrp = [Select Description, Id, Name, CollaborationType
				From CollaborationGroup Where CollaborationType = 'Public' Limit 1];
				*/

		advSuppGrp = new Advanced_Support_Groups__c(Active__c=true, All_Products__c=true, CSC__c=user.Id,
						Chatter_Group__c=chatterGrp.Name, CurrencyIsoCode='USD', Queue__c=grp.Name);
		insert advSuppGrp;

	  /*  Support_Address__c supportAddress = new Support_Address__c(Name ='Support TST' , emailAddress__c ='testSupport@cadence.com');
		Support_Address__c supportAddress1 = new Support_Address__c(Name ='NO_REPLY' , emailAddress__c ='noreply@cadence.com');
		insert new List<Support_Address__c>{supportAddress, supportAddress1}; */

		Country__c country = TestUtils.createCountry('India', true);
		State__c state = TestUtils.createState(country.Id, true);
	  /*  List<CaseAssignmentRelatedValues__c> csRelVals = new List<CaseAssignmentRelatedValues__c>{new CaseAssignmentRelatedValues__c(ValueList__c = 'Silicon Package Board', Name = 'BUSummaryBypassDelay'),
		new CaseAssignmentRelatedValues__c(ValueList__c = 'Eval', Name = 'ProdStatusByPassDelay')};

		insert csRelVals;

		List<Case_Assignment_Interval__c> csIntervals = new List<Case_Assignment_Interval__c>{
			new Case_Assignment_Interval__c(Hours__c=18, Minutes__c=0, Name='CS DELAY'),
			new Case_Assignment_Interval__c(Hours__c=1, Minutes__c=0, Name='CS TEMP DELAY')
		};

		insert csIntervals; */

		Case newCase = new Case(Status = 'New', Subject = 'Subject',
		Description = 'desc',
		Origin = 'Manual',  Product_Feature2__c = prodClsProdFeat.id,
		Product__c =  prodCls.id,
		product_Feature__c = prodFeat.id,
		Product_Feature_Lvl_1__c = prodFeatLevel1.id,
		Product_Feature_Lvl_2__c = prodFeatLevel2.id,
		Product_Feature_Version__c = prodFeatVersion.id,
		Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
		Trigger_Bypass__c = true,
		Assignment_Made__c = false);

	   // insert newCase;

		return  newCase;
	 }
	  private static Group createGroup(String grpName){
		Group grp = new Group();
		grp.DeveloperName =grp.Name = grpName;
		grp.Type = 'Queue';

		return grp;
	}

	private static QueueSObject  createQueueSObject (String Id){
	   QueueSObject q = new QueueSObject(SobjectType='Case', QueueId=Id);
	   insert q;

		return q;
	}


/************************************************************************************
	This function used to create Record Type Map for Account
	************************************************************************************/
	static Map<String,String> getRecTypeMap() {
	  Map<String,String> recTypeMap = new Map<String,String>();
	  for(RecordType r : [Select r.Id, r.DeveloperName
								From RecordType r
								where r.SobjectType = 'Account'
								and DeveloperName in :validRecordTypes]){
		recTypeMap.put(r.DeveloperName,r.Id);
	  }
	  return recTypeMap;
	}

	@isTest
	static void testTierAccountAssignments_a2() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'China';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('CHINA', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='China',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();
	}

	@isTest
	static void testNormalAssignFrance() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'France';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('France', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='France',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();
	}

	@isTest
	static void testNormalAssignGermany() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'Germany';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('Germany', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='Germany',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();
	}

	@isTest
	static void testNormalAssignIsrael() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'Israel';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('Israel', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='Israel',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();
	}

	@isTest
	static void testNormalAssignHongKong() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'Hong Kong';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('Hong Kong', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='Hong Kong',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();
	}

	@isTest
	static void testNormalAssignKorea() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'Korea';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('Korea', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='Korea',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();
	}

	@isTest
	static void testNormalAssignRussia() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'Russia';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('Russia', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='Russia',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();
	}

	@isTest
	static void testNormalAssignSingapore() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'Singapore';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('Singapore', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='Singapore',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();
	}

	@isTest
	static void testNormalAssignUK() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'United Kingdom';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('United Kingdom', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='United Kingdom',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();
	}

	@isTest
	static void testNormalAssignUS() {

	   Test.startTest();
		Map<String,String> recTypeMap = getRecTypeMap();
		AccountTriggerHandler_AC.isByPassTrigger=true;
		ContactTriggerHandler_AC.bypassUnifiedUser = true;
		Account parentAccount = TestUtils.createAccountWithRecordType(
										recTypeMap.get('Parent_Account'),true);

		Account acc = TestUtils.createAccount(false);
		acc.ParentId = parentAccount.id;
		acc.Status__c = 'Active';
		acc.Type = 'Top';
		acc.Support_Level__c='Advanced Support';
		acc.Support_Center__c = 'United States';
		User u1 = TestContext.queryCadenceMigrationUser();
		if(u1 != null){
		   System.runAs(u1){
			   insert acc;
		   }
	   }else{
		   insert acc;
	   }
		Country__c country = TestUtils.createCountry('United States', true);

		Contact con = TestUtils.createContact(acc.Id, false);
		con.Parent_Account__c = parentAccount.id;
		con.country__c = country.id;
		con.Email = 'test@cadence.com';
		insert con;

		prodTEMP = TestUtils2.createProductClass(false);
		prodTEMP.Name = 'testProduct';
		insert prodTEMP;

		Product_Feature__c pFeature = new Product_Feature__c();
		pFeature.Name = 'I2C - Inter IC';
		pFeature.Active_Flag__c = true;
		insert pFeature;

		QueueAssignment__c qAssignment = new QueueAssignment__c();
		qAssignment.Name='testQueueAssignment';
		qAssignment.Product__c=prodTEMP.Id;
		qAssignment.Product_Feature__c=pFeature.Id;
		qAssignment.BU_Summary__c='';
		qAssignment.Task_Types__c='ACR';

		insert qAssignment;

		recordtype r=[select id from recordtype where sobjecttype='case' limit 1];
		CaseTriggerHandler_AC.isByPassCheck = true;
		Case newCase = new Case(Status = 'New', Subject = 'Subject',
						Description = 'desc',
						Origin = 'Manual',
						ContactId = con.Id,
						Product__c =  prodTEMP.Id,
						product_Feature__c = pFeature.Id,
						Assignment_Status__c = CaseAssignmentEngine_AC.CHECK_ASSIGNMENT,
						Support_Center__c ='United States',recordtypeid=r.id
						);

		User migrationUser = null;
		for(User u : [Select Id From User where Name = 'Cadence Migration' Limit 1]){
			migrationUser = u;
		}
		if(migrationUser != null){
			system.runAs(migrationUser){
				insert newCase;
		}
		}else{
				insert newCase;
		}

		CaseAssignmentEngine_AC.assignMultipleCases(new List<Case>{newCase}, null, true) ;

		Test.stoptest();
	}

}
/* CodeOptimization Marker */


